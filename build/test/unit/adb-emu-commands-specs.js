"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _2 = _interopRequireDefault(require("../.."));

var _appiumTestSupport = require("appium-test-support");

var _lodash = _interopRequireDefault(require("lodash"));

_chai.default.use(_chaiAsPromised.default);

_chai.default.should();

const emulators = [{
  udid: 'emulator-5554',
  state: 'device',
  port: 5554
}, {
  udid: 'emulator-5556',
  state: 'device',
  port: 5556
}];
const fingerprintId = 1111;
const adb = new _2.default();
describe('adb emulator commands', (0, _appiumTestSupport.withMocks)({
  adb
}, function (mocks) {
  afterEach(function () {
    mocks.verify();
  });
  describe("emu", function () {
    describe("isEmulatorConnected", function () {
      it("should verify emulators state", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("getConnectedEmulators").atLeast(3).returns(emulators);
        adb.curDeviceId = "emulator-5554";
        (yield adb.isEmulatorConnected()).should.equal(true);
        adb.curDeviceId = "emulator-5556";
        (yield adb.isEmulatorConnected()).should.equal(true);
        adb.curDeviceId = "emulator-5558";
        (yield adb.isEmulatorConnected()).should.equal(false);
      }));
    });
    describe("verifyEmulatorConnected", function () {
      it("should throw an exception on emulator not connected", (0, _asyncToGenerator2.default)(function* () {
        adb.curDeviceId = "emulator-5558";
        mocks.adb.expects("isEmulatorConnected").once().returns(false);
        yield adb.verifyEmulatorConnected().should.eventually.be.rejected;
      }));
    });
    describe("fingerprint", function () {
      it("should throw exception on undefined fingerprintId", (0, _asyncToGenerator2.default)(function* () {
        yield adb.fingerprint().should.eventually.be.rejected;
      }));
      it("should throw exception on apiLevel lower than 23", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("getApiLevel").once().withExactArgs().returns(21);
        yield adb.fingerprint(fingerprintId).should.eventually.be.rejected;
      }));
      it("should call adbExec with the correct args", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("getApiLevel").once().withExactArgs().returns(23);
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "finger", "touch", fingerprintId]).returns();
        yield adb.fingerprint(fingerprintId);
      }));
    });
    describe("rotate", function () {
      it("should call adbExec with the correct args", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "rotate"]).returns();
        yield adb.rotate();
      }));
    });
    describe("power methods", function () {
      it("should throw exception on invalid power ac state", (0, _asyncToGenerator2.default)(function* () {
        yield adb.powerAC('dead').should.eventually.be.rejectedWith("Wrong power AC state");
      }));
      it("should set the power ac off", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "power", "ac", adb.POWER_AC_STATES.POWER_AC_OFF]).returns();
        yield adb.powerAC('off');
      }));
      it("should set the power ac on", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "power", "ac", adb.POWER_AC_STATES.POWER_AC_ON]).returns();
        yield adb.powerAC('on');
      }));
      it("should throw exception on invalid power battery percent", (0, _asyncToGenerator2.default)(function* () {
        yield adb.powerCapacity(-1).should.eventually.be.rejectedWith("should be valid integer between 0 and 100");
        yield adb.powerCapacity("a").should.eventually.be.rejectedWith("should be valid integer between 0 and 100");
        yield adb.powerCapacity(500).should.eventually.be.rejectedWith("should be valid integer between 0 and 100");
      }));
      it("should set the power capacity", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "power", "capacity", 0]).returns();
        yield adb.powerCapacity(0);
      }));
      it("should call methods to power off the emulator", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("powerAC").once().withExactArgs('off').returns();
        mocks.adb.expects("powerCapacity").once().withExactArgs(0).returns();
        yield adb.powerOFF();
      }));
    });
    describe("sendSMS", function () {
      it("should throw exception on invalid message", (0, _asyncToGenerator2.default)(function* () {
        yield adb.sendSMS("+549341312345678").should.eventually.be.rejectedWith("Sending an SMS requires a message");
      }));
      it("should throw exception on invalid phoneNumber", (0, _asyncToGenerator2.default)(function* () {
        yield adb.sendSMS("00549341a312345678", 'Hello Appium').should.eventually.be.rejectedWith("Invalid sendSMS phoneNumber");
      }));
      it("should call adbExec with the correct args", (0, _asyncToGenerator2.default)(function* () {
        let phoneNumber = 4509;
        let message = " Hello Appium ";
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "sms", "send", "4509", "Hello Appium"]).returns();
        yield adb.sendSMS(phoneNumber, message);
      }));
    });
    describe("gsm signal method", function () {
      it("should throw exception on invalid strength", (0, _asyncToGenerator2.default)(function* () {
        yield adb.gsmSignal(5).should.eventually.be.rejectedWith("Invalid signal strength");
      }));
      it("should call adbExecEmu with the correct args", (0, _asyncToGenerator2.default)(function* () {
        let signalStrength = 0;
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", 'signal-profile', signalStrength]).returns();
        yield adb.gsmSignal(signalStrength);
      }));
    });
    describe("gsm call methods", function () {
      it("should throw exception on invalid action", (0, _asyncToGenerator2.default)(function* () {
        yield adb.gsmCall("+549341312345678").should.eventually.be.rejectedWith("Invalid gsm action");
      }));
      it("should throw exception on invalid phoneNumber", (0, _asyncToGenerator2.default)(function* () {
        yield adb.gsmCall("+5493413a12345678", "call").should.eventually.be.rejectedWith("Invalid gsmCall phoneNumber");
      }));
      it("should set the correct method for making gsm call", (0, _asyncToGenerator2.default)(function* () {
        let phoneNumber = 4509;
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", adb.GSM_CALL_ACTIONS.GSM_CALL, "4509"]).returns();
        yield adb.gsmCall(phoneNumber, "call");
      }));
      it("should set the correct method for accepting gsm call", (0, _asyncToGenerator2.default)(function* () {
        let phoneNumber = 4509;
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", adb.GSM_CALL_ACTIONS.GSM_ACCEPT, "4509"]).returns();
        yield adb.gsmCall(phoneNumber, "accept");
      }));
      it("should set the correct method for refusing gsm call", (0, _asyncToGenerator2.default)(function* () {
        let phoneNumber = 4509;
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", adb.GSM_CALL_ACTIONS.GSM_CANCEL, "4509"]).returns();
        yield adb.gsmCall(phoneNumber, "cancel");
      }));
      it("should set the correct method for holding gsm call", (0, _asyncToGenerator2.default)(function* () {
        let phoneNumber = 4509;
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", adb.GSM_CALL_ACTIONS.GSM_HOLD, "4509"]).returns();
        yield adb.gsmCall(phoneNumber, "hold");
      }));
    });
    describe("network speed method", function () {
      it("should throw exception on invalid speed", (0, _asyncToGenerator2.default)(function* () {
        yield adb.networkSpeed('light').should.eventually.be.rejectedWith("Invalid network speed");
      }));
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _lodash.default.toPairs(adb.NETWORK_SPEED)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
              key = _step$value[0],
              value = _step$value[1];

          it(`should set network speed(${key}) correctly`, (0, _asyncToGenerator2.default)(function* () {
            mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
            mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
            mocks.adb.expects("adbExec").once().withExactArgs(["emu", "network", "speed", value]).returns();
            yield adb.networkSpeed(value);
          }));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    });
    describe("gsm voice method", function () {
      it("should throw exception on invalid strength", (0, _asyncToGenerator2.default)(function* () {
        yield adb.gsmVoice('weird').should.eventually.be.rejectedWith("Invalid gsm voice state");
      }));
      it("should set gsm voice to unregistered", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_UNREGISTERED]).returns();
        yield adb.gsmVoice("unregistered");
      }));
      it("should set gsm voice to home", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_HOME]).returns();
        yield adb.gsmVoice("home");
      }));
      it("should set gsm voice to roaming", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_ROAMING]).returns();
        yield adb.gsmVoice("roaming");
      }));
      it("should set gsm voice to searching", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_SEARCHING]).returns();
        yield adb.gsmVoice("searching");
      }));
      it("should set gsm voice to denied", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_DENIED]).returns();
        yield adb.gsmVoice("denied");
      }));
      it("should set gsm voice to off", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_OFF]).returns();
        yield adb.gsmVoice("off");
      }));
      it("should set gsm voice to on", (0, _asyncToGenerator2.default)(function* () {
        mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
        mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
        mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_ON]).returns();
        yield adb.gsmVoice("on");
      }));
    });
  });
}));require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
