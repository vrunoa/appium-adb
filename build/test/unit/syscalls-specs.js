"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _2 = _interopRequireDefault(require("../.."));

var teen_process = _interopRequireWildcard(require("teen_process"));

var _appiumTestSupport = require("appium-test-support");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

_chai.default.use(_chaiAsPromised.default);

const adb = new _2.default();
adb.executable.path = 'adb_path';
const avdName = 'AVD_NAME';
describe('System calls', (0, _appiumTestSupport.withMocks)({
  teen_process
}, function (mocks) {
  afterEach(function () {
    mocks.verify();
  });
  it('getConnectedDevices should get all connected devices', (0, _asyncToGenerator2.default)(function* () {
    mocks.teen_process.expects("exec").once().withExactArgs(adb.executable.path, ['-P', 5037, 'devices']).returns({
      stdout: "List of devices attached \n emulator-5554	device"
    });
    let devices = yield adb.getConnectedDevices();
    devices.should.have.length.above(0);
  }));
  it('getConnectedDevices should get all connected devices which have valid udid', (0, _asyncToGenerator2.default)(function* () {
    let stdoutValue = "List of devices attached \n" + "adb server version (32) doesn't match this client (36); killing...\n" + "* daemon started successfully *\n" + "emulator-5554	device";
    mocks.teen_process.expects("exec").once().withExactArgs(adb.executable.path, ['-P', 5037, 'devices']).returns({
      stdout: stdoutValue
    });
    let devices = yield adb.getConnectedDevices();
    devices.should.have.length.above(0);
  }));
  it('getConnectedDevices should fail when adb devices returns unexpected output', (0, _asyncToGenerator2.default)(function* () {
    mocks.teen_process.expects("exec").once().withExactArgs(adb.executable.path, ['-P', 5037, 'devices']).returns({
      stdout: "foobar"
    });
    yield adb.getConnectedDevices().should.eventually.be.rejectedWith("Unexpected output while trying to get devices");
  }));
  it('getDevicesWithRetry should fail when there are no connected devices', (0, _asyncToGenerator2.default)(function* () {
    this.timeout(20000);
    mocks.teen_process.expects("exec").atLeast(2).withExactArgs(adb.executable.path, ['-P', 5037, 'devices']).returns({
      stdout: "List of devices attached"
    });
    mocks.teen_process.expects("exec").atLeast(2).withExactArgs(adb.executable.path, ['-P', 5037, 'kill-server']);
    yield adb.getDevicesWithRetry(1000).should.eventually.be.rejectedWith("Could not find a connected Android device.");
  }));
  it('getDevicesWithRetry should fail when adb devices returns unexpected output', (0, _asyncToGenerator2.default)(function* () {
    mocks.teen_process.expects("exec").atLeast(2).withExactArgs(adb.executable.path, ['-P', 5037, 'devices']).returns({
      stdout: "foobar"
    });
    mocks.teen_process.expects("exec").atLeast(2).withExactArgs(adb.executable.path, ['-P', 5037, 'kill-server']);
    yield adb.getDevicesWithRetry(1000).should.eventually.be.rejectedWith("Could not find a connected Android device.");
  }));
  it('getDevicesWithRetry should get all connected devices', (0, _asyncToGenerator2.default)(function* () {
    mocks.teen_process.expects("exec").once().withExactArgs(adb.executable.path, ['-P', 5037, 'devices']).returns({
      stdout: "List of devices attached \n emulator-5554	device"
    });
    let devices = yield adb.getDevicesWithRetry(1000);
    devices.should.have.length.above(0);
  }));
  it('getDevicesWithRetry should get all connected devices second time', (0, _asyncToGenerator2.default)(function* () {
    mocks.teen_process.expects("exec").onCall(0).returns({
      stdout: "Foobar"
    });
    mocks.teen_process.expects("exec").withExactArgs(adb.executable.path, ['-P', 5037, 'devices']).returns({
      stdout: "List of devices attached \n emulator-5554	device"
    });
    mocks.teen_process.expects("exec").once().withExactArgs(adb.executable.path, ['-P', 5037, 'kill-server']);
    let devices = yield adb.getDevicesWithRetry(2000);
    devices.should.have.length.above(0);
  }));
  it('getDevicesWithRetry should fail when exec throws an error', (0, _asyncToGenerator2.default)(function* () {
    mocks.teen_process.expects("exec").atLeast(2).throws("Error foobar");
    yield adb.getDevicesWithRetry(1000).should.eventually.be.rejectedWith("Could not find a connected Android device.");
  }));
  it('setDeviceId should set the device id', function () {
    adb.setDeviceId('foobar');
    adb.curDeviceId.should.equal('foobar');
    adb.executable.defaultArgs.should.include('foobar');
  });
  it('setDevice should set the device id and emu port from obj', function () {
    adb.setDevice({
      udid: 'emulator-1234'
    });
    adb.curDeviceId.should.equal('emulator-1234');
    adb.executable.defaultArgs.should.include('emulator-1234');
    adb.emulatorPort.should.equal(1234);
  });
  it('setEmulatorPort should change emulator port', function () {
    adb.setEmulatorPort(5554);
    adb.emulatorPort.should.equal(5554);
  });
  describe('createSubProcess', function () {
    it('should return an instance of SubProcess', function () {
      adb.createSubProcess([]).should.be.an.instanceof(teen_process.SubProcess);
    });
  });
}));
describe('System calls', (0, _appiumTestSupport.withMocks)({
  adb,
  B: _bluebird.default,
  teen_process
}, function (mocks) {
  afterEach(function () {
    mocks.verify();
  });
  it('should return adb version', (0, _asyncToGenerator2.default)(function* () {
    mocks.adb.expects("adbExec").once().withExactArgs('version').returns("Android Debug Bridge version 1.0.39\nRevision 5943271ace17-android");
    let adbVersion = yield adb.getAdbVersion();
    adbVersion.versionString.should.equal("1.0.39");
    adbVersion.versionFloat.should.be.within(1.0, 1.0);
    adbVersion.major.should.equal(1);
    adbVersion.minor.should.equal(0);
    adbVersion.patch.should.equal(39);
  }));
  it('should cache adb results', (0, _asyncToGenerator2.default)(function* () {
    adb.getAdbVersion.cache = new _lodash.default.memoize.Cache();
    mocks.adb.expects("adbExec").once().withExactArgs('version').returns("Android Debug Bridge version 1.0.39\nRevision 5943271ace17-android");
    yield adb.getAdbVersion();
    yield adb.getAdbVersion();
  }));
  it('fileExists should return true for if ls returns', (0, _asyncToGenerator2.default)(function* () {
    mocks.adb.expects("ls").once().withExactArgs('foo').returns(['bar']);
    yield adb.fileExists("foo").should.eventually.equal(true);
  }));
  it('ls should return list', (0, _asyncToGenerator2.default)(function* () {
    mocks.adb.expects("shell").once().withExactArgs(['ls', 'foo']).returns('bar');
    let list = yield adb.ls("foo");
    list.should.deep.equal(['bar']);
  }));
  it('fileSize should return the file size when digit is after permissions', (0, _asyncToGenerator2.default)(function* () {
    let remotePath = '/sdcard/test.mp4';
    mocks.adb.expects('shell').once().withExactArgs(['ls', '-la', remotePath]).returns(`-rw-rw---- 1 root sdcard_rw 39571 2017-06-23 07:33 ${remotePath}`);
    let size = yield adb.fileSize(remotePath);
    size.should.eql(39571);
  }));
  it('fileSize should return the file size when digit is not after permissions', (0, _asyncToGenerator2.default)(function* () {
    let remotePath = '/sdcard/test.mp4';
    mocks.adb.expects('shell').once().withExactArgs(['ls', '-la', remotePath]).returns(`-rw-rw---- root sdcard_rw 39571 2017-06-23 07:33 ${remotePath}`);
    let size = yield adb.fileSize(remotePath);
    size.should.eql(39571);
  }));
  it('reboot should call stop and start using shell', (0, _asyncToGenerator2.default)(function* () {
    mocks.adb.expects("shell").once().withExactArgs(['stop']);
    mocks.adb.expects("setDeviceProperty").once().withExactArgs('sys.boot_completed', 0);
    mocks.adb.expects("shell").once().withExactArgs(['start']);
    mocks.adb.expects("getDeviceProperty").once().withExactArgs('sys.boot_completed').returns('1');
    mocks.B.expects("delay").once().withExactArgs(2000);
    yield adb.reboot().should.eventually.not.be.rejected;
  }));
  it('reboot should restart adbd as root if necessary', (0, _asyncToGenerator2.default)(function* () {
    mocks.teen_process.expects("exec").once().withExactArgs(adb.executable.path, ['root']).returns(false);
    mocks.adb.expects("shell").twice().withExactArgs(['stop']).onFirstCall().throws(new Error(`Error executing adbExec. Original error: 'Command 'adb shell stop' exited with code 1'; Stderr: 'stop: must be root'; Code: '1'`)).onSecondCall().returns();
    mocks.adb.expects("setDeviceProperty").once().withExactArgs('sys.boot_completed', 0);
    mocks.adb.expects("shell").once().withExactArgs(['start']);
    mocks.adb.expects("getDeviceProperty").once().withExactArgs('sys.boot_completed').returns('1');
    mocks.B.expects("delay").once().withExactArgs(2000);
    yield adb.reboot().should.eventually.not.be.rejected;
  }));
  it('getRunningAVD should get connected avd', (0, _asyncToGenerator2.default)(function* () {
    let udid = 'emulator-5554';
    let port = 5554;
    let emulator = {
      udid,
      port
    };
    mocks.adb.expects("getConnectedEmulators").once().withExactArgs().returns([emulator]);
    mocks.adb.expects("setEmulatorPort").once().withExactArgs(port);
    mocks.adb.expects("sendTelnetCommand").once().withExactArgs("avd name").returns(avdName);
    mocks.adb.expects("setDeviceId").once().withExactArgs(udid);
    (yield adb.getRunningAVD(avdName)).should.equal(emulator);
  }));
  it('getRunningAVD should return null when expected avd is not connected', (0, _asyncToGenerator2.default)(function* () {
    let udid = 'emulator-5554';
    let port = 5554;
    let emulator = {
      udid,
      port
    };
    mocks.adb.expects("getConnectedEmulators").once().withExactArgs().returns([emulator]);
    mocks.adb.expects("setEmulatorPort").once().withExactArgs(port);
    mocks.adb.expects("sendTelnetCommand").once().withExactArgs("avd name").returns('OTHER_AVD');
    _chai.default.expect((yield adb.getRunningAVD(avdName))).to.be.null;
  }));
  it('getRunningAVD should return null when no avd is connected', (0, _asyncToGenerator2.default)(function* () {
    mocks.adb.expects("getConnectedEmulators").once().withExactArgs().returns([]);
    _chai.default.expect((yield adb.getRunningAVD(avdName))).to.be.null;
  }));
}));require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9zeXNjYWxscy1zcGVjcy5qcyJdLCJuYW1lcyI6WyJjaGFpIiwidXNlIiwiY2hhaUFzUHJvbWlzZWQiLCJhZGIiLCJBREIiLCJleGVjdXRhYmxlIiwicGF0aCIsImF2ZE5hbWUiLCJkZXNjcmliZSIsInRlZW5fcHJvY2VzcyIsIm1vY2tzIiwiYWZ0ZXJFYWNoIiwidmVyaWZ5IiwiaXQiLCJleHBlY3RzIiwib25jZSIsIndpdGhFeGFjdEFyZ3MiLCJyZXR1cm5zIiwic3Rkb3V0IiwiZGV2aWNlcyIsImdldENvbm5lY3RlZERldmljZXMiLCJzaG91bGQiLCJoYXZlIiwibGVuZ3RoIiwiYWJvdmUiLCJzdGRvdXRWYWx1ZSIsImV2ZW50dWFsbHkiLCJiZSIsInJlamVjdGVkV2l0aCIsInRpbWVvdXQiLCJhdExlYXN0IiwiZ2V0RGV2aWNlc1dpdGhSZXRyeSIsIm9uQ2FsbCIsInRocm93cyIsInNldERldmljZUlkIiwiY3VyRGV2aWNlSWQiLCJlcXVhbCIsImRlZmF1bHRBcmdzIiwiaW5jbHVkZSIsInNldERldmljZSIsInVkaWQiLCJlbXVsYXRvclBvcnQiLCJzZXRFbXVsYXRvclBvcnQiLCJjcmVhdGVTdWJQcm9jZXNzIiwiYW4iLCJpbnN0YW5jZW9mIiwiU3ViUHJvY2VzcyIsIkIiLCJhZGJWZXJzaW9uIiwiZ2V0QWRiVmVyc2lvbiIsInZlcnNpb25TdHJpbmciLCJ2ZXJzaW9uRmxvYXQiLCJ3aXRoaW4iLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJjYWNoZSIsIl8iLCJtZW1vaXplIiwiQ2FjaGUiLCJmaWxlRXhpc3RzIiwibGlzdCIsImxzIiwiZGVlcCIsInJlbW90ZVBhdGgiLCJzaXplIiwiZmlsZVNpemUiLCJlcWwiLCJyZWJvb3QiLCJub3QiLCJyZWplY3RlZCIsInR3aWNlIiwib25GaXJzdENhbGwiLCJFcnJvciIsIm9uU2Vjb25kQ2FsbCIsInBvcnQiLCJlbXVsYXRvciIsImdldFJ1bm5pbmdBVkQiLCJleHBlY3QiLCJ0byIsIm51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QVVXLE9BQVYsQ0FBa0IsbUJBQWxCLEVBQ0dDLElBREgsR0FDVUMsYUFEVixDQUN3QixVQUR4QixFQUVHQyxPQUZILENBRVcsV0FGWDtBQUdBakIsa0JBQUs4RSxNQUFMLFFBQWtCM0UsR0FBRyxDQUFDMEUsYUFBSixDQUFrQnRFLE9BQWxCLENBQWxCLEdBQThDd0UsRUFBOUMsQ0FBaURwRCxFQUFqRCxDQUFvRHFELElBQXBEO0FBQ0QsR0FiQyxFQUFGO0FBY0FuRSxFQUFBQSxFQUFFLENBQUMsMkRBQUQsa0NBQThELGFBQWtCO0FBQ2hGSCxJQUFBQSxLQUFLLENBQUNQLEdBQU4sQ0FBVVcsT0FBVixDQUFrQix1QkFBbEIsRUFDR0MsSUFESCxHQUNVQyxhQURWLEdBRUdDLE9BRkgsQ0FFVyxFQUZYO0FBR0FqQixrQkFBSzhFLE1BQUwsUUFBa0IzRSxHQUFHLENBQUMwRSxhQUFKLENBQWtCdEUsT0FBbEIsQ0FBbEIsR0FBOEN3RSxFQUE5QyxDQUFpRHBELEVBQWpELENBQW9EcUQsSUFBcEQ7QUFDRCxHQUxDLEVBQUY7QUFNRCxDQTdId0IsQ0FBakIsQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IEFEQiBmcm9tICcuLi8uLic7XG5pbXBvcnQgKiBhcyB0ZWVuX3Byb2Nlc3MgZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IHdpdGhNb2NrcyB9IGZyb20gJ2FwcGl1bS10ZXN0LXN1cHBvcnQnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5jb25zdCBhZGIgPSBuZXcgQURCKCk7XG5hZGIuZXhlY3V0YWJsZS5wYXRoID0gJ2FkYl9wYXRoJztcbmNvbnN0IGF2ZE5hbWUgPSAnQVZEX05BTUUnO1xuXG5kZXNjcmliZSgnU3lzdGVtIGNhbGxzJywgd2l0aE1vY2tzKHt0ZWVuX3Byb2Nlc3N9LCBmdW5jdGlvbiAobW9ja3MpIHtcbiAgYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICBtb2Nrcy52ZXJpZnkoKTtcbiAgfSk7XG5cbiAgaXQoJ2dldENvbm5lY3RlZERldmljZXMgc2hvdWxkIGdldCBhbGwgY29ubmVjdGVkIGRldmljZXMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbW9ja3MudGVlbl9wcm9jZXNzLmV4cGVjdHMoXCJleGVjXCIpXG4gICAgICAub25jZSgpLndpdGhFeGFjdEFyZ3MoYWRiLmV4ZWN1dGFibGUucGF0aCwgWyctUCcsIDUwMzcsICdkZXZpY2VzJ10pXG4gICAgICAucmV0dXJucyh7c3Rkb3V0OiBcIkxpc3Qgb2YgZGV2aWNlcyBhdHRhY2hlZCBcXG4gZW11bGF0b3ItNTU1NFx0ZGV2aWNlXCJ9KTtcbiAgICBsZXQgZGV2aWNlcyA9IGF3YWl0IGFkYi5nZXRDb25uZWN0ZWREZXZpY2VzKCk7XG4gICAgZGV2aWNlcy5zaG91bGQuaGF2ZS5sZW5ndGguYWJvdmUoMCk7XG4gIH0pO1xuICBpdCgnZ2V0Q29ubmVjdGVkRGV2aWNlcyBzaG91bGQgZ2V0IGFsbCBjb25uZWN0ZWQgZGV2aWNlcyB3aGljaCBoYXZlIHZhbGlkIHVkaWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHN0ZG91dFZhbHVlID0gXCJMaXN0IG9mIGRldmljZXMgYXR0YWNoZWQgXFxuXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIFwiYWRiIHNlcnZlciB2ZXJzaW9uICgzMikgZG9lc24ndCBtYXRjaCB0aGlzIGNsaWVudCAoMzYpOyBraWxsaW5nLi4uXFxuXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIFwiKiBkYWVtb24gc3RhcnRlZCBzdWNjZXNzZnVsbHkgKlxcblwiICtcbiAgICAgICAgICAgICAgICAgICAgICBcImVtdWxhdG9yLTU1NTRcdGRldmljZVwiO1xuICAgIG1vY2tzLnRlZW5fcHJvY2Vzcy5leHBlY3RzKFwiZXhlY1wiKVxuICAgICAgLm9uY2UoKS53aXRoRXhhY3RBcmdzKGFkYi5leGVjdXRhYmxlLnBhdGgsIFsnLVAnLCA1MDM3LCAnZGV2aWNlcyddKVxuICAgICAgLnJldHVybnMoe3N0ZG91dDogc3Rkb3V0VmFsdWV9KTtcblxuICAgIGxldCBkZXZpY2VzID0gYXdhaXQgYWRiLmdldENvbm5lY3RlZERldmljZXMoKTtcbiAgICBkZXZpY2VzLnNob3VsZC5oYXZlLmxlbmd0aC5hYm92ZSgwKTtcbiAgfSk7XG4gIGl0KCdnZXRDb25uZWN0ZWREZXZpY2VzIHNob3VsZCBmYWlsIHdoZW4gYWRiIGRldmljZXMgcmV0dXJucyB1bmV4cGVjdGVkIG91dHB1dCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBtb2Nrcy50ZWVuX3Byb2Nlc3MuZXhwZWN0cyhcImV4ZWNcIilcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncyhhZGIuZXhlY3V0YWJsZS5wYXRoLCBbJy1QJywgNTAzNywgJ2RldmljZXMnXSlcbiAgICAgIC5yZXR1cm5zKHtzdGRvdXQ6IFwiZm9vYmFyXCJ9KTtcbiAgICBhd2FpdCBhZGIuZ2V0Q29ubmVjdGVkRGV2aWNlcygpLnNob3VsZC5ldmVudHVhbGx5LmJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZWplY3RlZFdpdGgoXCJVbmV4cGVjdGVkIG91dHB1dCB3aGlsZSB0cnlpbmcgdG8gZ2V0IGRldmljZXNcIik7XG4gIH0pO1xuICBpdCgnZ2V0RGV2aWNlc1dpdGhSZXRyeSBzaG91bGQgZmFpbCB3aGVuIHRoZXJlIGFyZSBubyBjb25uZWN0ZWQgZGV2aWNlcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRpbWVvdXQoMjAwMDApO1xuICAgIG1vY2tzLnRlZW5fcHJvY2Vzcy5leHBlY3RzKFwiZXhlY1wiKVxuICAgICAgLmF0TGVhc3QoMikud2l0aEV4YWN0QXJncyhhZGIuZXhlY3V0YWJsZS5wYXRoLCBbJy1QJywgNTAzNywgJ2RldmljZXMnXSlcbiAgICAgIC5yZXR1cm5zKHtzdGRvdXQ6IFwiTGlzdCBvZiBkZXZpY2VzIGF0dGFjaGVkXCJ9KTtcbiAgICBtb2Nrcy50ZWVuX3Byb2Nlc3MuZXhwZWN0cyhcImV4ZWNcIilcbiAgICAgIC5hdExlYXN0KDIpLndpdGhFeGFjdEFyZ3MoYWRiLmV4ZWN1dGFibGUucGF0aCwgWyctUCcsIDUwMzcsICdraWxsLXNlcnZlciddKTtcbiAgICBhd2FpdCBhZGIuZ2V0RGV2aWNlc1dpdGhSZXRyeSgxMDAwKS5zaG91bGQuZXZlbnR1YWxseS5iZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlamVjdGVkV2l0aChcIkNvdWxkIG5vdCBmaW5kIGEgY29ubmVjdGVkIEFuZHJvaWQgZGV2aWNlLlwiKTtcbiAgfSk7XG4gIGl0KCdnZXREZXZpY2VzV2l0aFJldHJ5IHNob3VsZCBmYWlsIHdoZW4gYWRiIGRldmljZXMgcmV0dXJucyB1bmV4cGVjdGVkIG91dHB1dCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBtb2Nrcy50ZWVuX3Byb2Nlc3MuZXhwZWN0cyhcImV4ZWNcIilcbiAgICAgIC5hdExlYXN0KDIpLndpdGhFeGFjdEFyZ3MoYWRiLmV4ZWN1dGFibGUucGF0aCwgWyctUCcsIDUwMzcsICdkZXZpY2VzJ10pXG4gICAgICAucmV0dXJucyh7c3Rkb3V0OiBcImZvb2JhclwifSk7XG4gICAgbW9ja3MudGVlbl9wcm9jZXNzLmV4cGVjdHMoXCJleGVjXCIpXG4gICAgICAuYXRMZWFzdCgyKS53aXRoRXhhY3RBcmdzKGFkYi5leGVjdXRhYmxlLnBhdGgsIFsnLVAnLCA1MDM3LCAna2lsbC1zZXJ2ZXInXSk7XG4gICAgYXdhaXQgYWRiLmdldERldmljZXNXaXRoUmV0cnkoMTAwMCkuc2hvdWxkLmV2ZW50dWFsbHkuYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZWplY3RlZFdpdGgoXCJDb3VsZCBub3QgZmluZCBhIGNvbm5lY3RlZCBBbmRyb2lkIGRldmljZS5cIik7XG4gIH0pO1xuICBpdCgnZ2V0RGV2aWNlc1dpdGhSZXRyeSBzaG91bGQgZ2V0IGFsbCBjb25uZWN0ZWQgZGV2aWNlcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBtb2Nrcy50ZWVuX3Byb2Nlc3MuZXhwZWN0cyhcImV4ZWNcIilcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncyhhZGIuZXhlY3V0YWJsZS5wYXRoLCBbJy1QJywgNTAzNywgJ2RldmljZXMnXSlcbiAgICAgIC5yZXR1cm5zKHtzdGRvdXQ6IFwiTGlzdCBvZiBkZXZpY2VzIGF0dGFjaGVkIFxcbiBlbXVsYXRvci01NTU0XHRkZXZpY2VcIn0pO1xuICAgIGxldCBkZXZpY2VzID0gYXdhaXQgYWRiLmdldERldmljZXNXaXRoUmV0cnkoMTAwMCk7XG4gICAgZGV2aWNlcy5zaG91bGQuaGF2ZS5sZW5ndGguYWJvdmUoMCk7XG4gIH0pO1xuICBpdCgnZ2V0RGV2aWNlc1dpdGhSZXRyeSBzaG91bGQgZ2V0IGFsbCBjb25uZWN0ZWQgZGV2aWNlcyBzZWNvbmQgdGltZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBtb2Nrcy50ZWVuX3Byb2Nlc3MuZXhwZWN0cyhcImV4ZWNcIilcbiAgICAgIC5vbkNhbGwoMClcbiAgICAgIC5yZXR1cm5zKHtzdGRvdXQ6IFwiRm9vYmFyXCJ9KTtcbiAgICBtb2Nrcy50ZWVuX3Byb2Nlc3MuZXhwZWN0cyhcImV4ZWNcIilcbiAgICAgIC53aXRoRXhhY3RBcmdzKGFkYi5leGVjdXRhYmxlLnBhdGgsIFsnLVAnLCA1MDM3LCAnZGV2aWNlcyddKVxuICAgICAgLnJldHVybnMoe3N0ZG91dDogXCJMaXN0IG9mIGRldmljZXMgYXR0YWNoZWQgXFxuIGVtdWxhdG9yLTU1NTRcdGRldmljZVwifSk7XG4gICAgbW9ja3MudGVlbl9wcm9jZXNzLmV4cGVjdHMoXCJleGVjXCIpXG4gICAgICAub25jZSgpLndpdGhFeGFjdEFyZ3MoYWRiLmV4ZWN1dGFibGUucGF0aCwgWyctUCcsIDUwMzcsICdraWxsLXNlcnZlciddKTtcbiAgICBsZXQgZGV2aWNlcyA9IGF3YWl0IGFkYi5nZXREZXZpY2VzV2l0aFJldHJ5KDIwMDApO1xuICAgIGRldmljZXMuc2hvdWxkLmhhdmUubGVuZ3RoLmFib3ZlKDApO1xuICB9KTtcbiAgaXQoJ2dldERldmljZXNXaXRoUmV0cnkgc2hvdWxkIGZhaWwgd2hlbiBleGVjIHRocm93cyBhbiBlcnJvcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBtb2Nrcy50ZWVuX3Byb2Nlc3MuZXhwZWN0cyhcImV4ZWNcIilcbiAgICAgIC5hdExlYXN0KDIpXG4gICAgICAudGhyb3dzKFwiRXJyb3IgZm9vYmFyXCIpO1xuICAgIGF3YWl0IGFkYi5nZXREZXZpY2VzV2l0aFJldHJ5KDEwMDApLnNob3VsZC5ldmVudHVhbGx5LmJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVqZWN0ZWRXaXRoKFwiQ291bGQgbm90IGZpbmQgYSBjb25uZWN0ZWQgQW5kcm9pZCBkZXZpY2UuXCIpO1xuICB9KTtcbiAgaXQoJ3NldERldmljZUlkIHNob3VsZCBzZXQgdGhlIGRldmljZSBpZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBhZGIuc2V0RGV2aWNlSWQoJ2Zvb2JhcicpO1xuICAgIGFkYi5jdXJEZXZpY2VJZC5zaG91bGQuZXF1YWwoJ2Zvb2JhcicpO1xuICAgIGFkYi5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLnNob3VsZC5pbmNsdWRlKCdmb29iYXInKTtcbiAgfSk7XG4gIGl0KCdzZXREZXZpY2Ugc2hvdWxkIHNldCB0aGUgZGV2aWNlIGlkIGFuZCBlbXUgcG9ydCBmcm9tIG9iaicsIGZ1bmN0aW9uICgpIHtcbiAgICBhZGIuc2V0RGV2aWNlKHt1ZGlkOiAnZW11bGF0b3ItMTIzNCd9KTtcbiAgICBhZGIuY3VyRGV2aWNlSWQuc2hvdWxkLmVxdWFsKCdlbXVsYXRvci0xMjM0Jyk7XG4gICAgYWRiLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3Muc2hvdWxkLmluY2x1ZGUoJ2VtdWxhdG9yLTEyMzQnKTtcbiAgICBhZGIuZW11bGF0b3JQb3J0LnNob3VsZC5lcXVhbCgxMjM0KTtcbiAgfSk7XG4gIGl0KCdzZXRFbXVsYXRvclBvcnQgc2hvdWxkIGNoYW5nZSBlbXVsYXRvciBwb3J0JywgZnVuY3Rpb24gKCkge1xuICAgIGFkYi5zZXRFbXVsYXRvclBvcnQoNTU1NCk7XG4gICAgYWRiLmVtdWxhdG9yUG9ydC5zaG91bGQuZXF1YWwoNTU1NCk7XG4gIH0pO1xuICBkZXNjcmliZSgnY3JlYXRlU3ViUHJvY2VzcycsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBpbnN0YW5jZSBvZiBTdWJQcm9jZXNzJywgZnVuY3Rpb24gKCkge1xuICAgICAgYWRiLmNyZWF0ZVN1YlByb2Nlc3MoW10pLnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKHRlZW5fcHJvY2Vzcy5TdWJQcm9jZXNzKTtcbiAgICB9KTtcbiAgfSk7XG59KSk7XG5cbmRlc2NyaWJlKCdTeXN0ZW0gY2FsbHMnLCB3aXRoTW9ja3Moe2FkYiwgQiwgdGVlbl9wcm9jZXNzfSwgZnVuY3Rpb24gKG1vY2tzKSB7XG4gIGFmdGVyRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgbW9ja3MudmVyaWZ5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIGFkYiB2ZXJzaW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIG1vY2tzLmFkYi5leHBlY3RzKFwiYWRiRXhlY1wiKVxuICAgICAgLm9uY2UoKVxuICAgICAgLndpdGhFeGFjdEFyZ3MoJ3ZlcnNpb24nKVxuICAgICAgLnJldHVybnMoXCJBbmRyb2lkIERlYnVnIEJyaWRnZSB2ZXJzaW9uIDEuMC4zOVxcblJldmlzaW9uIDU5NDMyNzFhY2UxNy1hbmRyb2lkXCIpO1xuICAgIGxldCBhZGJWZXJzaW9uID0gYXdhaXQgYWRiLmdldEFkYlZlcnNpb24oKTtcbiAgICBhZGJWZXJzaW9uLnZlcnNpb25TdHJpbmcuc2hvdWxkLmVxdWFsKFwiMS4wLjM5XCIpO1xuICAgIGFkYlZlcnNpb24udmVyc2lvbkZsb2F0LnNob3VsZC5iZS53aXRoaW4oMS4wLCAxLjApO1xuICAgIGFkYlZlcnNpb24ubWFqb3Iuc2hvdWxkLmVxdWFsKDEpO1xuICAgIGFkYlZlcnNpb24ubWlub3Iuc2hvdWxkLmVxdWFsKDApO1xuICAgIGFkYlZlcnNpb24ucGF0Y2guc2hvdWxkLmVxdWFsKDM5KTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgY2FjaGUgYWRiIHJlc3VsdHMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgYWRiLmdldEFkYlZlcnNpb24uY2FjaGUgPSBuZXcgXy5tZW1vaXplLkNhY2hlKCk7XG4gICAgbW9ja3MuYWRiLmV4cGVjdHMoXCJhZGJFeGVjXCIpXG4gICAgICAub25jZSgpXG4gICAgICAud2l0aEV4YWN0QXJncygndmVyc2lvbicpXG4gICAgICAucmV0dXJucyhcIkFuZHJvaWQgRGVidWcgQnJpZGdlIHZlcnNpb24gMS4wLjM5XFxuUmV2aXNpb24gNTk0MzI3MWFjZTE3LWFuZHJvaWRcIik7XG4gICAgYXdhaXQgYWRiLmdldEFkYlZlcnNpb24oKTtcbiAgICBhd2FpdCBhZGIuZ2V0QWRiVmVyc2lvbigpO1xuICB9KTtcbiAgaXQoJ2ZpbGVFeGlzdHMgc2hvdWxkIHJldHVybiB0cnVlIGZvciBpZiBscyByZXR1cm5zJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIG1vY2tzLmFkYi5leHBlY3RzKFwibHNcIilcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncygnZm9vJylcbiAgICAgIC5yZXR1cm5zKFsnYmFyJ10pO1xuICAgIGF3YWl0IGFkYi5maWxlRXhpc3RzKFwiZm9vXCIpLnNob3VsZC5ldmVudHVhbGx5LmVxdWFsKHRydWUpO1xuICB9KTtcbiAgaXQoJ2xzIHNob3VsZCByZXR1cm4gbGlzdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcInNoZWxsXCIpXG4gICAgICAub25jZSgpLndpdGhFeGFjdEFyZ3MoWydscycsICdmb28nXSlcbiAgICAgIC5yZXR1cm5zKCdiYXInKTtcbiAgICBsZXQgbGlzdCA9IGF3YWl0IGFkYi5scyhcImZvb1wiKTtcbiAgICBsaXN0LnNob3VsZC5kZWVwLmVxdWFsKFsnYmFyJ10pO1xuICB9KTtcbiAgaXQoJ2ZpbGVTaXplIHNob3VsZCByZXR1cm4gdGhlIGZpbGUgc2l6ZSB3aGVuIGRpZ2l0IGlzIGFmdGVyIHBlcm1pc3Npb25zJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGxldCByZW1vdGVQYXRoID0gJy9zZGNhcmQvdGVzdC5tcDQnO1xuICAgIG1vY2tzLmFkYi5leHBlY3RzKCdzaGVsbCcpXG4gICAgICAub25jZSgpLndpdGhFeGFjdEFyZ3MoWydscycsICctbGEnLCByZW1vdGVQYXRoXSlcbiAgICAgIC5yZXR1cm5zKGAtcnctcnctLS0tIDEgcm9vdCBzZGNhcmRfcncgMzk1NzEgMjAxNy0wNi0yMyAwNzozMyAke3JlbW90ZVBhdGh9YCk7XG4gICAgbGV0IHNpemUgPSBhd2FpdCBhZGIuZmlsZVNpemUocmVtb3RlUGF0aCk7XG4gICAgc2l6ZS5zaG91bGQuZXFsKDM5NTcxKTtcbiAgfSk7XG4gIGl0KCdmaWxlU2l6ZSBzaG91bGQgcmV0dXJuIHRoZSBmaWxlIHNpemUgd2hlbiBkaWdpdCBpcyBub3QgYWZ0ZXIgcGVybWlzc2lvbnMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHJlbW90ZVBhdGggPSAnL3NkY2FyZC90ZXN0Lm1wNCc7XG4gICAgbW9ja3MuYWRiLmV4cGVjdHMoJ3NoZWxsJylcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncyhbJ2xzJywgJy1sYScsIHJlbW90ZVBhdGhdKVxuICAgICAgLnJldHVybnMoYC1ydy1ydy0tLS0gcm9vdCBzZGNhcmRfcncgMzk1NzEgMjAxNy0wNi0yMyAwNzozMyAke3JlbW90ZVBhdGh9YCk7XG4gICAgbGV0IHNpemUgPSBhd2FpdCBhZGIuZmlsZVNpemUocmVtb3RlUGF0aCk7XG4gICAgc2l6ZS5zaG91bGQuZXFsKDM5NTcxKTtcbiAgfSk7XG4gIGl0KCdyZWJvb3Qgc2hvdWxkIGNhbGwgc3RvcCBhbmQgc3RhcnQgdXNpbmcgc2hlbGwnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbW9ja3MuYWRiLmV4cGVjdHMoXCJzaGVsbFwiKVxuICAgICAgLm9uY2UoKS53aXRoRXhhY3RBcmdzKFsnc3RvcCddKTtcbiAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcInNldERldmljZVByb3BlcnR5XCIpXG4gICAgICAub25jZSgpLndpdGhFeGFjdEFyZ3MoJ3N5cy5ib290X2NvbXBsZXRlZCcsIDApO1xuICAgIG1vY2tzLmFkYi5leHBlY3RzKFwic2hlbGxcIilcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncyhbJ3N0YXJ0J10pO1xuICAgIG1vY2tzLmFkYi5leHBlY3RzKFwiZ2V0RGV2aWNlUHJvcGVydHlcIilcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncygnc3lzLmJvb3RfY29tcGxldGVkJylcbiAgICAgIC5yZXR1cm5zKCcxJyk7XG4gICAgbW9ja3MuQi5leHBlY3RzKFwiZGVsYXlcIilcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncygyMDAwKTtcbiAgICBhd2FpdCBhZGIucmVib290KCkuc2hvdWxkLmV2ZW50dWFsbHkubm90LmJlLnJlamVjdGVkO1xuICB9KTtcbiAgaXQoJ3JlYm9vdCBzaG91bGQgcmVzdGFydCBhZGJkIGFzIHJvb3QgaWYgbmVjZXNzYXJ5JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIG1vY2tzLnRlZW5fcHJvY2Vzcy5leHBlY3RzKFwiZXhlY1wiKVxuICAgICAgLm9uY2UoKS53aXRoRXhhY3RBcmdzKGFkYi5leGVjdXRhYmxlLnBhdGgsIFsncm9vdCddKVxuICAgICAgLnJldHVybnMoZmFsc2UpO1xuICAgIG1vY2tzLmFkYi5leHBlY3RzKFwic2hlbGxcIilcbiAgICAgIC50d2ljZSgpLndpdGhFeGFjdEFyZ3MoWydzdG9wJ10pXG4gICAgICAub25GaXJzdENhbGwoKVxuICAgICAgICAudGhyb3dzKG5ldyBFcnJvcihgRXJyb3IgZXhlY3V0aW5nIGFkYkV4ZWMuIE9yaWdpbmFsIGVycm9yOiAnQ29tbWFuZCAnYWRiIHNoZWxsIHN0b3AnIGV4aXRlZCB3aXRoIGNvZGUgMSc7IFN0ZGVycjogJ3N0b3A6IG11c3QgYmUgcm9vdCc7IENvZGU6ICcxJ2ApKVxuICAgICAgLm9uU2Vjb25kQ2FsbCgpLnJldHVybnMoKTtcbiAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcInNldERldmljZVByb3BlcnR5XCIpXG4gICAgICAub25jZSgpLndpdGhFeGFjdEFyZ3MoJ3N5cy5ib290X2NvbXBsZXRlZCcsIDApO1xuICAgIG1vY2tzLmFkYi5leHBlY3RzKFwic2hlbGxcIilcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncyhbJ3N0YXJ0J10pO1xuICAgIG1vY2tzLmFkYi5leHBlY3RzKFwiZ2V0RGV2aWNlUHJvcGVydHlcIilcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncygnc3lzLmJvb3RfY29tcGxldGVkJylcbiAgICAgIC5yZXR1cm5zKCcxJyk7XG4gICAgbW9ja3MuQi5leHBlY3RzKFwiZGVsYXlcIilcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncygyMDAwKTtcbiAgICBhd2FpdCBhZGIucmVib290KCkuc2hvdWxkLmV2ZW50dWFsbHkubm90LmJlLnJlamVjdGVkO1xuICB9KTtcbiAgaXQoJ2dldFJ1bm5pbmdBVkQgc2hvdWxkIGdldCBjb25uZWN0ZWQgYXZkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGxldCB1ZGlkID0gJ2VtdWxhdG9yLTU1NTQnO1xuICAgIGxldCBwb3J0ID0gNTU1NDtcbiAgICBsZXQgZW11bGF0b3IgPSB7dWRpZCwgcG9ydH07XG4gICAgbW9ja3MuYWRiLmV4cGVjdHMoXCJnZXRDb25uZWN0ZWRFbXVsYXRvcnNcIilcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncygpXG4gICAgICAucmV0dXJucyhbZW11bGF0b3JdKTtcbiAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcInNldEVtdWxhdG9yUG9ydFwiKVxuICAgICAgLm9uY2UoKS53aXRoRXhhY3RBcmdzKHBvcnQpO1xuICAgIG1vY2tzLmFkYi5leHBlY3RzKFwic2VuZFRlbG5ldENvbW1hbmRcIilcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncyhcImF2ZCBuYW1lXCIpXG4gICAgICAucmV0dXJucyhhdmROYW1lKTtcbiAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcInNldERldmljZUlkXCIpXG4gICAgICAub25jZSgpLndpdGhFeGFjdEFyZ3ModWRpZCk7XG4gICAgKGF3YWl0IGFkYi5nZXRSdW5uaW5nQVZEKGF2ZE5hbWUpKS5zaG91bGQuZXF1YWwoZW11bGF0b3IpO1xuICB9KTtcbiAgaXQoJ2dldFJ1bm5pbmdBVkQgc2hvdWxkIHJldHVybiBudWxsIHdoZW4gZXhwZWN0ZWQgYXZkIGlzIG5vdCBjb25uZWN0ZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHVkaWQgPSAnZW11bGF0b3ItNTU1NCc7XG4gICAgbGV0IHBvcnQgPSA1NTU0O1xuICAgIGxldCBlbXVsYXRvciA9IHt1ZGlkLCBwb3J0fTtcbiAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcImdldENvbm5lY3RlZEVtdWxhdG9yc1wiKVxuICAgICAgLm9uY2UoKS53aXRoRXhhY3RBcmdzKClcbiAgICAgIC5yZXR1cm5zKFtlbXVsYXRvcl0pO1xuICAgIG1vY2tzLmFkYi5leHBlY3RzKFwic2V0RW11bGF0b3JQb3J0XCIpXG4gICAgICAub25jZSgpLndpdGhFeGFjdEFyZ3MocG9ydCk7XG4gICAgbW9ja3MuYWRiLmV4cGVjdHMoXCJzZW5kVGVsbmV0Q29tbWFuZFwiKVxuICAgICAgLm9uY2UoKS53aXRoRXhhY3RBcmdzKFwiYXZkIG5hbWVcIilcbiAgICAgIC5yZXR1cm5zKCdPVEhFUl9BVkQnKTtcbiAgICBjaGFpLmV4cGVjdChhd2FpdCBhZGIuZ2V0UnVubmluZ0FWRChhdmROYW1lKSkudG8uYmUubnVsbDtcbiAgfSk7XG4gIGl0KCdnZXRSdW5uaW5nQVZEIHNob3VsZCByZXR1cm4gbnVsbCB3aGVuIG5vIGF2ZCBpcyBjb25uZWN0ZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbW9ja3MuYWRiLmV4cGVjdHMoXCJnZXRDb25uZWN0ZWRFbXVsYXRvcnNcIilcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncygpXG4gICAgICAucmV0dXJucyhbXSk7XG4gICAgY2hhaS5leHBlY3QoYXdhaXQgYWRiLmdldFJ1bm5pbmdBVkQoYXZkTmFtZSkpLnRvLmJlLm51bGw7XG4gIH0pO1xufSkpO1xuIl0sImZpbGUiOiJ0ZXN0L3VuaXQvc3lzY2FsbHMtc3BlY3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
