"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _helpers = require("../../lib/helpers");

var _appiumTestSupport = require("appium-test-support");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

describe('helpers', (0, _appiumTestSupport.withMocks)({
  fs: _appiumSupport.fs
}, function (mocks) {
  afterEach(function () {
    mocks.verify();
  });
  describe('getAndroidPlatformAndPath', function () {
    let oldAndroidHome;
    before(function () {
      oldAndroidHome = process.env.ANDROID_HOME;
    });
    after(function () {
      process.env.ANDROID_HOME = oldAndroidHome;
    });
    it('should get the latest available API', (0, _asyncToGenerator2.default)(function* () {
      process.env.ANDROID_HOME = '/path/to/android/home';
      mocks.fs.expects('glob').returns([_path.default.resolve(process.env.ANDROID_HOME, 'platforms', 'android-17', 'build.prop'), _path.default.resolve(process.env.ANDROID_HOME, 'platforms', 'android-25', 'build.prop'), _path.default.resolve(process.env.ANDROID_HOME, 'platforms', 'android-22', 'build.prop')]);
      mocks.fs.expects('readFile').exactly(3).onCall(0).returns(`
          ro.build.version.incremental=1425461
          ro.build.version.sdk=17
          ro.build.version.codename=REL
          ro.build.version.release=4.2.2`).onCall(1).returns(`
          ro.build.version.incremental=1425461
          ro.build.version.sdk=25
          ro.build.version.codename=REL
          ro.build.version.release=7.0`).onCall(2).returns(`
          ro.build.version.incremental=1425461
          ro.build.version.sdk=22
          ro.build.version.codename=REL
          ro.build.version.release=5.1`);
      let platformAndPath = yield (0, _helpers.getAndroidPlatformAndPath)();
      platformAndPath.platform.should.equal('android-25');
      platformAndPath.platformPath.should.equal(_path.default.resolve(process.env.ANDROID_HOME, 'platforms', 'android-25'));
    }));
  });
  describe('isShowingLockscreen', function () {
    it('should return true if mShowingLockscreen is true', (0, _asyncToGenerator2.default)(function* () {
      let dumpsys = 'mShowingLockscreen=true mShowingDream=false mDreamingLockscreen=false mTopIsFullscreen=false';
      (yield (0, _helpers.isShowingLockscreen)(dumpsys)).should.be.true;
    }));
    it('should return true if mDreamingLockscreen is true', (0, _asyncToGenerator2.default)(function* () {
      let dumpsys = 'mShowingLockscreen=false mShowingDream=false mDreamingLockscreen=true mTopIsFullscreen=false';
      (yield (0, _helpers.isShowingLockscreen)(dumpsys)).should.be.true;
    }));
    it('should return false if mShowingLockscreen and mDreamingLockscreen are false', (0, _asyncToGenerator2.default)(function* () {
      let dumpsys = 'mShowingLockscreen=false mShowingDream=false mDreamingLockscreen=false mTopIsFullscreen=false';
      (yield (0, _helpers.isShowingLockscreen)(dumpsys)).should.be.false;
    }));
    it('should assume that screen is unlocked if can not determine lock state', (0, _asyncToGenerator2.default)(function* () {
      let dumpsys = 'mShowingDream=false mTopIsFullscreen=false';
      (yield (0, _helpers.isShowingLockscreen)(dumpsys)).should.be.false;
    }));
  });
  describe('buildStartCmd', function () {
    let startOptions = {
      pkg: 'com.something',
      activity: '.SomeActivity'
    };
    it('should parse optionalIntentArguments with single key', function () {
      let cmd = (0, _helpers.buildStartCmd)(_lodash.default.defaults({
        optionalIntentArguments: '-d key'
      }, startOptions), 20);
      cmd[cmd.length - 2].should.eql('-d');
      cmd[cmd.length - 1].should.eql('key');
    });
    it('should parse optionalIntentArguments with single key/value pair', function () {
      let cmd = (0, _helpers.buildStartCmd)(_lodash.default.defaults({
        optionalIntentArguments: '-d key value'
      }, startOptions), 20);
      cmd[cmd.length - 3].should.eql('-d');
      cmd[cmd.length - 2].should.eql('key');
      cmd[cmd.length - 1].should.eql('value');
    });
    it('should parse optionalIntentArguments with single key/value pair with spaces', function () {
      let cmd = (0, _helpers.buildStartCmd)(_lodash.default.defaults({
        optionalIntentArguments: '-d key value value2'
      }, startOptions), 20);
      cmd[cmd.length - 3].should.eql('-d');
      cmd[cmd.length - 2].should.eql('key');
      cmd[cmd.length - 1].should.eql('value value2');
    });
    it('should parse optionalIntentArguments with multiple keys', function () {
      let cmd = (0, _helpers.buildStartCmd)(_lodash.default.defaults({
        optionalIntentArguments: '-d key1 -e key2'
      }, startOptions), 20);
      cmd[cmd.length - 4].should.eql('-d');
      cmd[cmd.length - 3].should.eql('key1');
      cmd[cmd.length - 2].should.eql('-e');
      cmd[cmd.length - 1].should.eql('key2');
    });
    it('should parse optionalIntentArguments with multiple key/value pairs', function () {
      let cmd = (0, _helpers.buildStartCmd)(_lodash.default.defaults({
        optionalIntentArguments: '-d key1 value1 -e key2 value2'
      }, startOptions), 20);
      cmd[cmd.length - 6].should.eql('-d');
      cmd[cmd.length - 5].should.eql('key1');
      cmd[cmd.length - 4].should.eql('value1');
      cmd[cmd.length - 3].should.eql('-e');
      cmd[cmd.length - 2].should.eql('key2');
      cmd[cmd.length - 1].should.eql('value2');
    });
    it('should parse optionalIntentArguments with hyphens', function () {
      let arg = 'http://some-url-with-hyphens.com/';
      let cmd = (0, _helpers.buildStartCmd)(_lodash.default.defaults({
        optionalIntentArguments: `-d ${arg}`
      }, startOptions), 20);
      cmd[cmd.length - 2].should.eql('-d');
      cmd[cmd.length - 1].should.eql(arg);
    });
    it('should parse optionalIntentArguments with multiple arguments with hyphens', function () {
      let arg1 = 'http://some-url-with-hyphens.com/';
      let arg2 = 'http://some-other-url-with-hyphens.com/';
      let cmd = (0, _helpers.buildStartCmd)(_lodash.default.defaults({
        optionalIntentArguments: `-d ${arg1} -e key ${arg2}`
      }, startOptions), 20);
      cmd[cmd.length - 5].should.eql('-d');
      cmd[cmd.length - 4].should.eql(arg1);
      cmd[cmd.length - 3].should.eql('-e');
      cmd[cmd.length - 2].should.eql('key');
      cmd[cmd.length - 1].should.eql(arg2);
    });
    it('should have -S option when stopApp is set', function () {
      let cmd = (0, _helpers.buildStartCmd)(_lodash.default.defaults({
        stopApp: true
      }, startOptions), 20);
      cmd[cmd.length - 1].should.eql('-S');
    });
    it('should not have -S option when stopApp is not set', function () {
      let cmd = (0, _helpers.buildStartCmd)(_lodash.default.defaults({
        stopApp: false
      }, startOptions), 20);
      cmd[cmd.length - 1].should.not.eql('-S');
    });
  });
  describe('getBuildToolsDirs', function () {
    it('should sort build-tools folder names by semantic version', (0, _asyncToGenerator2.default)(function* () {
      mocks.fs.expects('glob').once().returns(['/some/path/1.2.3', '/some/path/4.5.6', '/some/path/2.3.1']);
      (yield (0, _helpers.getBuildToolsDirs)('/dummy/path')).should.be.eql(['/some/path/4.5.6', '/some/path/2.3.1', '/some/path/1.2.3']);
    }));
  });
}));require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
