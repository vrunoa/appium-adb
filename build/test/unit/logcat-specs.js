"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var teen_process = _interopRequireWildcard(require("teen_process"));

var _events = _interopRequireDefault(require("events"));

var _logcat = _interopRequireDefault(require("../../lib/logcat"));

var _appiumTestSupport = require("appium-test-support");

_chai.default.use(_chaiAsPromised.default);

describe('logcat', (0, _appiumTestSupport.withMocks)({
  teen_process
}, function (mocks) {
  let adb = {
    path: 'dummyPath',
    defaultArgs: []
  };
  let logcat = new _logcat.default({
    adb,
    debug: false,
    debugTrace: false
  });
  afterEach(function () {
    mocks.verify();
  });
  describe('startCapture', function () {
    it('should correctly call subprocess and should resolve promise', (0, _asyncToGenerator2.default)(function* () {
      let conn = new _events.default.EventEmitter();

      conn.start = () => {};

      mocks.teen_process.expects("SubProcess").once().withExactArgs('dummyPath', ['logcat', '-v', 'threadtime']).returns(conn);
      setTimeout(function () {
        conn.emit('lines-stdout', ['- beginning of system\r']);
      }, 0);
      yield logcat.startCapture();
      let logs = logcat.getLogs();
      logs.should.have.length.above(0);
    }));
    it('should correctly call subprocess and should reject promise', (0, _asyncToGenerator2.default)(function* () {
      let conn = new _events.default.EventEmitter();

      conn.start = () => {};

      mocks.teen_process.expects("SubProcess").once().withExactArgs('dummyPath', ['logcat', '-v', 'threadtime']).returns(conn);
      setTimeout(function () {
        conn.emit('lines-stderr', ['execvp()']);
      }, 0);
      yield logcat.startCapture().should.eventually.be.rejectedWith('Logcat');
    }));
    it('should correctly call subprocess and should resolve promise if it fails on startup', (0, _asyncToGenerator2.default)(function* () {
      let conn = new _events.default.EventEmitter();

      conn.start = () => {};

      mocks.teen_process.expects("SubProcess").once().withExactArgs('dummyPath', ['logcat', '-v', 'threadtime']).returns(conn);
      setTimeout(function () {
        conn.emit('lines-stderr', ['something']);
      }, 0);
      yield logcat.startCapture().should.eventually.not.be.rejectedWith('Logcat');
    }));
  });
  describe('clear', function () {
    it('should call logcat clear', (0, _asyncToGenerator2.default)(function* () {
      mocks.teen_process.expects('exec').once().withExactArgs(adb.path, adb.defaultArgs.concat(['logcat', '-c']));
      yield logcat.clear();
    }));
    it('should not fail if logcat clear fails', (0, _asyncToGenerator2.default)(function* () {
      mocks.teen_process.expects('exec').once().withExactArgs(adb.path, adb.defaultArgs.concat(['logcat', '-c'])).throws('Failed to clear');
      yield logcat.clear().should.eventually.not.be.rejected;
    }));
  });
}));require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
