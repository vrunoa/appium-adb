"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _ = _interopRequireDefault(require("../.."));

var helpers = _interopRequireWildcard(require("../../lib/helpers.js"));

var _path = _interopRequireDefault(require("path"));

var teen_process = _interopRequireWildcard(require("teen_process"));

var appiumSupport = _interopRequireWildcard(require("appium-support"));

var _appiumTestSupport = require("appium-test-support");

_chai.default.use(_chaiAsPromised.default);

const selendroidTestApp = _path.default.resolve(helpers.rootDir, 'test', 'fixtures', 'selendroid-test-app.apk'),
      helperJarPath = _path.default.resolve(helpers.rootDir, 'jars'),
      keystorePath = _path.default.resolve(helpers.rootDir, 'test', 'fixtures', 'appiumtest.keystore'),
      defaultKeyPath = _path.default.resolve(helpers.rootDir, 'keys', 'testkey.pk8'),
      defaultCertPath = _path.default.resolve(helpers.rootDir, 'keys', 'testkey.x509.pem'),
      keyAlias = 'appiumtest',
      password = 'android',
      selendroidTestAppPackage = 'io.selendroid.testapp',
      javaDummyPath = 'java_dummy_path',
      javaHome = 'java_home',
      apksignerDummyPath = '/path/to/apksigner',
      tempDir = appiumSupport.tempDir,
      fs = appiumSupport.fs;

const adb = new _.default();
adb.keystorePath = keystorePath;
adb.keyAlias = keyAlias;
adb.keystorePassword = password;
adb.keyPassword = password;
describe('signing', (0, _appiumTestSupport.withMocks)({
  teen_process,
  helpers,
  adb,
  appiumSupport,
  fs,
  tempDir
}, function (mocks) {
  afterEach(function () {
    mocks.verify();
  });
  describe('signWithDefaultCert', function () {
    it('should call exec with correct args', (0, _asyncToGenerator2.default)(function* () {
      mocks.helpers.expects("getApksignerForOs").returns(apksignerDummyPath);
      mocks.teen_process.expects("exec").once().withExactArgs(apksignerDummyPath, ['sign', '--key', defaultKeyPath, '--cert', defaultCertPath, selendroidTestApp], {
        cwd: _path.default.dirname(apksignerDummyPath)
      }).returns({});
      yield adb.signWithDefaultCert(selendroidTestApp);
    }));
    it('should fallback to sign.jar if apksigner fails', (0, _asyncToGenerator2.default)(function* () {
      let signPath = _path.default.resolve(helperJarPath, 'sign.jar');

      mocks.helpers.expects("getApksignerForOs").returns(apksignerDummyPath);
      mocks.teen_process.expects("exec").once().withExactArgs(apksignerDummyPath, ['sign', '--key', defaultKeyPath, '--cert', defaultCertPath, selendroidTestApp], {
        cwd: _path.default.dirname(apksignerDummyPath)
      }).throws();
      mocks.helpers.expects("getJavaForOs").returns(javaDummyPath);
      mocks.teen_process.expects("exec").once().withExactArgs(javaDummyPath, ['-jar', signPath, selendroidTestApp, '--override']).returns({});
      yield adb.signWithDefaultCert(selendroidTestApp);
    }));
    it('should throw error for invalid file path', (0, _asyncToGenerator2.default)(function* () {
      let dummyPath = "dummyPath";
      yield adb.signWithDefaultCert(dummyPath).should.eventually.be.rejected;
    }));
  });
  describe('signWithCustomCert', function () {
    it('should call exec with correct args', (0, _asyncToGenerator2.default)(function* () {
      adb.useKeystore = true;
      mocks.helpers.expects("getApksignerForOs").returns(apksignerDummyPath);
      mocks.teen_process.expects("exec").withExactArgs(apksignerDummyPath, ['sign', '--ks', keystorePath, '--ks-key-alias', keyAlias, '--ks-pass', `pass:${password}`, '--key-pass', `pass:${password}`, selendroidTestApp], {
        cwd: _path.default.dirname(apksignerDummyPath)
      }).returns({});
      yield adb.signWithCustomCert(selendroidTestApp);
    }));
    it('should fallback to jarsigner if apksigner fails', (0, _asyncToGenerator2.default)(function* () {
      let jarsigner = _path.default.resolve(javaHome, 'bin', 'jarsigner');

      if (appiumSupport.system.isWindows()) {
        jarsigner = jarsigner + '.exe';
      }

      adb.useKeystore = true;
      mocks.helpers.expects("getApksignerForOs").returns(apksignerDummyPath);
      mocks.teen_process.expects("exec").withExactArgs(apksignerDummyPath, ['sign', '--ks', keystorePath, '--ks-key-alias', keyAlias, '--ks-pass', `pass:${password}`, '--key-pass', `pass:${password}`, selendroidTestApp], {
        cwd: _path.default.dirname(apksignerDummyPath)
      }).throws();
      mocks.helpers.expects("getJavaHome").returns(javaHome);
      mocks.helpers.expects("getJavaForOs").returns(javaDummyPath);
      mocks.teen_process.expects("exec").withExactArgs(javaDummyPath, ['-jar', _path.default.resolve(helperJarPath, 'unsign.jar'), selendroidTestApp]).returns({});
      mocks.teen_process.expects("exec").withExactArgs(jarsigner, ['-sigalg', 'MD5withRSA', '-digestalg', 'SHA1', '-keystore', keystorePath, '-storepass', password, '-keypass', password, selendroidTestApp, keyAlias]).returns({});
      yield adb.signWithCustomCert(selendroidTestApp);
    }));
  });
  describe('getKeystoreMd5', function () {
    it('should call exec with correct args', (0, _asyncToGenerator2.default)(function* () {
      let h = "a-fA-F0-9";

      let keytool = _path.default.resolve(javaHome, 'bin', 'keytool');

      let md5Str = ['.*MD5.*((?:[', h, ']{2}:){15}[', h, ']{2})'].join('');
      let md5 = new RegExp(md5Str, 'mi');
      adb.useKeystore = true;
      mocks.teen_process.expects("exec").once().withExactArgs(keytool, ['-v', '-list', '-alias', keyAlias, '-keystore', keystorePath, '-storepass', password]).returns({});
      yield adb.getKeystoreMd5(keytool, md5);
    }));
  });
  describe.skip('zipAlignApk', function () {
    it('should call exec with correct args', (0, _asyncToGenerator2.default)(function* () {
      let alignedApk = "dummy_path";
      mocks.tempDir.expects('path').once().withExactArgs({
        prefix: 'appium',
        suffix: '.tmp'
      }).returns(alignedApk);
      mocks.adb.expects('initZipAlign').once().withExactArgs().returns("");
      mocks.appiumSupport.expects('mkdirp').once().withExactArgs(_path.default.dirname(alignedApk)).returns({});
      mocks.teen_process.expects("exec").once().withExactArgs(adb.binaries.zipalign, ['-f', '4', selendroidTestApp, alignedApk]);
      mocks.fs.expects("mv").once().withExactArgs(alignedApk, selendroidTestApp, {
        mkdirp: true
      }).returns("");
      yield adb.zipAlignApk(selendroidTestApp);
    }));
  });
  describe('checkApkCert', function () {
    it('should return false for apk not present', (0, _asyncToGenerator2.default)(function* () {
      (yield adb.checkApkCert('dummyPath', 'dummyPackage')).should.be.false;
    }));
    it('should call exec when not using keystore', (0, _asyncToGenerator2.default)(function* () {
      adb.useKeystore = false;
      mocks.helpers.expects("getApksignerForOs").twice().returns(apksignerDummyPath);
      mocks.teen_process.expects("exec").once().withExactArgs(apksignerDummyPath, ['verify', '--print-certs', selendroidTestApp], {
        cwd: _path.default.dirname(apksignerDummyPath)
      }).returns({
        stdout: `Signer #1 certificate DN: EMAILADDRESS=android@android.com, CN=Android, OU=Android, O=Android, L=Mountain View, ST=California, C=US
                   Signer #1 certificate SHA-256 digest: a40da80a59d170caa950cf15c18c454d47a39b26989d8b640ecd745ba71bf5dc
                   Signer #1 certificate SHA-1 digest: 61ed377e85d386a8dfee6b864bd85b0bfaa5af81
                   Signer #1 certificate MD5 digest: e89b158e4bcf988ebd09eb83f5378e87`
      });
      (yield adb.checkApkCert(selendroidTestApp, selendroidTestAppPackage)).should.be.true;
    }));
    it('should fallback to verify.jar if apksigner is not found', (0, _asyncToGenerator2.default)(function* () {
      adb.useKeystore = false;
      mocks.helpers.expects("getApksignerForOs").throws();
      mocks.helpers.expects("getJavaForOs").returns(javaDummyPath);
      mocks.teen_process.expects("exec").withExactArgs(javaDummyPath, ['-jar', _path.default.resolve(helperJarPath, 'verify.jar'), selendroidTestApp]).returns({});
      (yield adb.checkApkCert(selendroidTestApp, selendroidTestAppPackage)).should.be.true;
    }));
    it('should call checkCustomApkCert when using keystore', (0, _asyncToGenerator2.default)(function* () {
      adb.useKeystore = true;
      mocks.adb.expects('checkCustomApkCert').once().withExactArgs(selendroidTestApp, selendroidTestAppPackage).returns("");
      yield adb.checkApkCert(selendroidTestApp, selendroidTestAppPackage);
    }));
  });
}));require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
