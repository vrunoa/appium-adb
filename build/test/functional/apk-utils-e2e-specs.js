"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _ = _interopRequireDefault(require("../.."));

var _path = _interopRequireDefault(require("path"));

var _helpers = require("../../lib/helpers.js");

var _asyncbox = require("asyncbox");

var _setup = require("./setup");

const waitDuration = 60000;

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

describe('apk utils', function () {
  this.timeout(_setup.MOCHA_TIMEOUT);
  let adb;

  const contactManagerPath = _path.default.resolve(_helpers.rootDir, 'test', 'fixtures', 'ContactManager.apk');

  const apiDemosPath = _path.default.resolve(_helpers.rootDir, 'test', 'fixtures', 'ApiDemos-debug.apk');

  const deviceTempPath = '/data/local/tmp/';

  const assertPackageAndActivity = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      let _ref2 = yield adb.getFocusedPackageAndActivity(),
          appPackage = _ref2.appPackage,
          appActivity = _ref2.appActivity;

      appPackage.should.equal('com.example.android.contactmanager');
      appActivity.should.equal('.ContactManager');
    });

    return function assertPackageAndActivity() {
      return _ref.apply(this, arguments);
    };
  }();

  before((0, _asyncToGenerator2.default)(function* () {
    adb = yield _.default.createADB();
  }));
  it('should be able to check status of third party app', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.isAppInstalled('com.android.phone')).should.be.true;
  }));
  it('should be able to install/remove app and detect its status', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.isAppInstalled('foo')).should.be.false;
    yield adb.install(contactManagerPath);
    (yield adb.isAppInstalled('com.example.android.contactmanager')).should.be.true;
    (yield adb.uninstallApk('com.example.android.contactmanager')).should.be.true;
    (yield adb.isAppInstalled('com.example.android.contactmanager')).should.be.false;
    (yield adb.uninstallApk('com.example.android.contactmanager')).should.be.false;
    yield adb.rimraf(deviceTempPath + 'ContactManager.apk');
    yield adb.push(contactManagerPath, deviceTempPath);
    yield adb.installFromDevicePath(deviceTempPath + 'ContactManager.apk');
  }));
  describe('startUri', function () {
    it('should be able to start a uri', (0, _asyncToGenerator2.default)(function* () {
      yield adb.goToHome();
      let res = yield adb.getFocusedPackageAndActivity();
      res.appPackage.should.not.equal('com.android.contacts');
      yield adb.install(contactManagerPath);
      yield adb.startUri('content://contacts/people', 'com.android.contacts');
      yield (0, _asyncbox.retryInterval)(10, 500, (0, _asyncToGenerator2.default)(function* () {
        res = yield adb.shell(['dumpsys', 'window', 'windows']);
        let focusRe1 = '(mCurrentFocus.+\\.PeopleActivity)';
        let focusRe2 = '(mFocusedApp.+\\.PeopleActivity)';
        res.should.match(new RegExp(`${focusRe1}|${focusRe2}`));
      }));
      yield adb.goToHome();
    }));
  });
  describe('startApp', function () {
    it('should be able to start', (0, _asyncToGenerator2.default)(function* () {
      yield adb.install(contactManagerPath);
      yield adb.startApp({
        pkg: 'com.example.android.contactmanager',
        activity: 'ContactManager',
        waitDuration: 60000
      });
      yield assertPackageAndActivity();
    }));
    it('should throw error for wrong activity', (0, _asyncToGenerator2.default)(function* () {
      yield adb.install(contactManagerPath);
      yield adb.startApp({
        pkg: 'com.example.android.contactmanager',
        activity: 'ContactManage'
      }).should.eventually.be.rejectedWith('Activity');
    }));
    it('should throw error for wrong wait activity', (0, _asyncToGenerator2.default)(function* () {
      yield adb.install(contactManagerPath);
      yield adb.startApp({
        pkg: 'com.example.android.contactmanager',
        activity: 'ContactManager',
        waitActivity: 'foo',
        waitDuration: 1000
      }).should.eventually.be.rejectedWith('foo');
    }));
    it('should start activity with wait activity', (0, _asyncToGenerator2.default)(function* () {
      yield adb.install(contactManagerPath);
      yield adb.startApp({
        pkg: 'com.example.android.contactmanager',
        activity: 'ContactManager',
        waitActivity: '.ContactManager',
        waitDuration
      });
      yield assertPackageAndActivity();
    }));
    it('should start activity when wait activity is a wildcard', (0, _asyncToGenerator2.default)(function* () {
      yield adb.install(contactManagerPath);
      yield adb.startApp({
        pkg: 'com.example.android.contactmanager',
        activity: 'ContactManager',
        waitActivity: '*',
        waitDuration
      });
      yield assertPackageAndActivity();
    }));
    it('should start activity when wait activity contains a wildcard', (0, _asyncToGenerator2.default)(function* () {
      yield adb.install(contactManagerPath);
      yield adb.startApp({
        pkg: 'com.example.android.contactmanager',
        activity: 'ContactManager',
        waitActivity: '*.ContactManager',
        waitDuration
      });
      yield assertPackageAndActivity();
    }));
    it('should throw error for wrong activity when wait activity contains a wildcard', (0, _asyncToGenerator2.default)(function* () {
      yield adb.install(contactManagerPath);
      yield adb.startApp({
        pkg: 'com.example.android.contactmanager',
        activity: 'SuperManager',
        waitActivity: '*.ContactManager'
      }).should.eventually.be.rejectedWith('Activity');
    }));
    it('should throw error for wrong wait activity which contains wildcard', (0, _asyncToGenerator2.default)(function* () {
      yield adb.install(contactManagerPath);
      yield adb.startApp({
        pkg: 'com.example.android.contactmanager',
        activity: 'ContactManager',
        waitActivity: '*.SuperManager'
      }).should.eventually.be.rejectedWith('SuperManager');
    }));
    it('should start activity with comma separated wait packages list', (0, _asyncToGenerator2.default)(function* () {
      yield adb.install(contactManagerPath);
      yield adb.startApp({
        pkg: 'com.example.android.contactmanager',
        waitPkg: 'com.android.settings, com.example.android.contactmanager',
        activity: 'ContactManager',
        waitActivity: '.ContactManager',
        waitDuration
      });
      yield assertPackageAndActivity();
    }));
    it('should throw error for wrong activity when packages provided as comma separated list', (0, _asyncToGenerator2.default)(function* () {
      yield adb.install(contactManagerPath);
      yield adb.startApp({
        pkg: 'com.example.android.contactmanager',
        waitPkg: 'com.android.settings, com.example.somethingelse',
        activity: 'SuperManager',
        waitActivity: '*.ContactManager'
      }).should.eventually.be.rejectedWith('Activity');
    }));
  });
  it('should start activity when start activity is an inner class', (0, _asyncToGenerator2.default)(function* () {
    yield adb.install(contactManagerPath);
    yield adb.startApp({
      pkg: 'com.android.settings',
      activity: '.Settings$NotificationAppListActivity',
      waitDuration
    });

    let _ref19 = yield adb.getFocusedPackageAndActivity(),
        appPackage = _ref19.appPackage,
        appActivity = _ref19.appActivity;

    appPackage.should.equal('com.android.settings');
    appActivity.should.equal('.Settings$NotificationAppListActivity');
  }));
  it('getFocusedPackageAndActivity should be able get package and activity', (0, _asyncToGenerator2.default)(function* () {
    yield adb.install(contactManagerPath);
    yield adb.startApp({
      pkg: 'com.example.android.contactmanager',
      activity: 'ContactManager',
      waitDuration
    });
    yield assertPackageAndActivity();
  }));
  it('extractStringsFromApk should get strings for default language', (0, _asyncToGenerator2.default)(function* () {
    let _ref22 = yield adb.extractStringsFromApk(contactManagerPath, null, '/tmp'),
        apkStrings = _ref22.apkStrings;

    apkStrings.save.should.equal('Save');
  }));
  it('extractStringsFromApk should get strings for non-default language', (0, _asyncToGenerator2.default)(function* () {
    let _ref24 = yield adb.extractStringsFromApk(apiDemosPath, 'fr', '/tmp'),
        apkStrings = _ref24.apkStrings;

    apkStrings.linear_layout_8_horizontal.should.equal('Horizontal');
  }));
  it('extractStringsFromApk should get strings for en language', (0, _asyncToGenerator2.default)(function* () {
    let _ref26 = yield adb.extractStringsFromApk(apiDemosPath, 'en', '/tmp'),
        apkStrings = _ref26.apkStrings;

    apkStrings.linear_layout_8_horizontal.should.equal('Horizontal');
  }));
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
