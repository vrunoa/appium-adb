"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _ = _interopRequireDefault(require("../.."));

var _path = _interopRequireDefault(require("path"));

var _helpers = require("../../lib/helpers.js");

var _asyncbox = require("asyncbox");

_chai.default.use(_chaiAsPromised.default);

_chai.default.should();

const fingerprintPath = _path.default.resolve(_helpers.rootDir, 'test', 'fixtures', 'Fingerprint.apk');

const pkg = 'com.example.fingerprint';
const activity = '.MainActivity';
const secretActivity = '.SecretActivity';
describe('adb emu commands', function () {
  let adb;
  before((0, _asyncToGenerator2.default)(function* () {
    adb = yield _.default.createADB();

    if ((yield adb.getApiLevel()) < 23 || !process.env.REAL_DEVICE) {
      return this.skip();
    }
  }));
  it('fingerprint should open the secret activity on emitted valid finger touch event', (0, _asyncToGenerator2.default)(function* () {
    if (yield adb.isAppInstalled(pkg)) {
      yield adb.forceStop(pkg);
      yield adb.uninstallApk(pkg);
    }

    yield adb.install(fingerprintPath);
    yield adb.startApp({
      pkg,
      activity
    });
    yield (0, _asyncbox.sleep)(500);
    let app = yield adb.getFocusedPackageAndActivity();
    app.appActivity.should.equal(activity);
    yield adb.fingerprint(1111);
    yield (0, _asyncbox.sleep)(2500);
    app = yield adb.getFocusedPackageAndActivity();
    app.appActivity.should.equal(secretActivity);
  }));
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9hZGItZW11LWNvbW1hbmRzLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6WyJjaGFpIiwidXNlIiwiY2hhaUFzUHJvbWlzZWQiLCJzaG91bGQiLCJmaW5nZXJwcmludFBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsInJvb3REaXIiLCJwa2ciLCJhY3Rpdml0eSIsInNlY3JldEFjdGl2aXR5IiwiZGVzY3JpYmUiLCJhZGIiLCJiZWZvcmUiLCJBREIiLCJjcmVhdGVBREIiLCJnZXRBcGlMZXZlbCIsInByb2Nlc3MiLCJlbnYiLCJSRUFMX0RFVklDRSIsInNraXAiLCJpdCIsImlzQXBwSW5zdGFsbGVkIiwiZm9yY2VTdG9wIiwidW5pbnN0YWxsQXBrIiwiaW5zdGFsbCIsInN0YXJ0QXBwIiwiYXBwIiwiZ2V0Rm9jdXNlZFBhY2thZ2VBbmRBY3Rpdml0eSIsImFwcEFjdGl2aXR5IiwiZXF1YWwiLCJmaW5nZXJwcmludCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0FBLGNBQUtDLEdBQUwsQ0FBU0MsdUJBQVQ7O0FBQ0FGLGNBQUtHLE1BQUw7O0FBRUEsTUFBTUMsZUFBZSxHQUFHQyxjQUFLQyxPQUFMLENBQWFDLGdCQUFiLEVBQXNCLE1BQXRCLEVBQThCLFVBQTlCLEVBQTBDLGlCQUExQyxDQUF4Qjs7QUFDQSxNQUFNQyxHQUFHLEdBQUcseUJBQVo7QUFDQSxNQUFNQyxRQUFRLEdBQUcsZUFBakI7QUFDQSxNQUFNQyxjQUFjLEdBQUcsaUJBQXZCO0FBRUFDLFFBQVEsQ0FBQyxrQkFBRCxFQUFxQixZQUFZO0FBQ3ZDLE1BQUlDLEdBQUo7QUFDQUMsRUFBQUEsTUFBTSxpQ0FBQyxhQUFrQjtBQUN2QkQsSUFBQUEsR0FBRyxTQUFTRSxVQUFJQyxTQUFKLEVBQVo7O0FBSUEsUUFBSSxPQUFNSCxHQUFHLENBQUNJLFdBQUosRUFBTixJQUEwQixFQUExQixJQUFnQyxDQUFDQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsV0FBakQsRUFBOEQ7QUFDNUQsYUFBTyxLQUFLQyxJQUFMLEVBQVA7QUFDRDtBQUNGLEdBUkssRUFBTjtBQVNBQyxFQUFBQSxFQUFFLENBQUMsaUZBQUQsa0NBQW9GLGFBQWtCO0FBQ3RHLGNBQVVULEdBQUcsQ0FBQ1UsY0FBSixDQUFtQmQsR0FBbkIsQ0FBVixFQUFtQztBQUNqQyxZQUFNSSxHQUFHLENBQUNXLFNBQUosQ0FBY2YsR0FBZCxDQUFOO0FBQ0EsWUFBTUksR0FBRyxDQUFDWSxZQUFKLENBQWlCaEIsR0FBakIsQ0FBTjtBQUNEOztBQUNELFVBQU1JLEdBQUcsQ0FBQ2EsT0FBSixDQUFZckIsZUFBWixDQUFOO0FBQ0EsVUFBTVEsR0FBRyxDQUFDYyxRQUFKLENBQWE7QUFBQ2xCLE1BQUFBLEdBQUQ7QUFBTUMsTUFBQUE7QUFBTixLQUFiLENBQU47QUFDQSxVQUFNLHFCQUFNLEdBQU4sQ0FBTjtBQUVBLFFBQUlrQixHQUFHLFNBQVNmLEdBQUcsQ0FBQ2dCLDRCQUFKLEVBQWhCO0FBQ0FELElBQUFBLEdBQUcsQ0FBQ0UsV0FBSixDQUFnQjFCLE1BQWhCLENBQXVCMkIsS0FBdkIsQ0FBNkJyQixRQUE3QjtBQUNBLFVBQU1HLEdBQUcsQ0FBQ21CLFdBQUosQ0FBZ0IsSUFBaEIsQ0FBTjtBQUNBLFVBQU0scUJBQU0sSUFBTixDQUFOO0FBRUFKLElBQUFBLEdBQUcsU0FBU2YsR0FBRyxDQUFDZ0IsNEJBQUosRUFBWjtBQUNBRCxJQUFBQSxHQUFHLENBQUNFLFdBQUosQ0FBZ0IxQixNQUFoQixDQUF1QjJCLEtBQXZCLENBQTZCcEIsY0FBN0I7QUFDRCxHQWhCQyxFQUFGO0FBaUJELENBNUJPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBBREIgZnJvbSAnLi4vLi4nO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyByb290RGlyIH0gZnJvbSAnLi4vLi4vbGliL2hlbHBlcnMuanMnO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICdhc3luY2JveCc7XG5cblxuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuY2hhaS5zaG91bGQoKTtcblxuY29uc3QgZmluZ2VycHJpbnRQYXRoID0gcGF0aC5yZXNvbHZlKHJvb3REaXIsICd0ZXN0JywgJ2ZpeHR1cmVzJywgJ0ZpbmdlcnByaW50LmFwaycpO1xuY29uc3QgcGtnID0gJ2NvbS5leGFtcGxlLmZpbmdlcnByaW50JztcbmNvbnN0IGFjdGl2aXR5ID0gJy5NYWluQWN0aXZpdHknO1xuY29uc3Qgc2VjcmV0QWN0aXZpdHkgPSAnLlNlY3JldEFjdGl2aXR5JztcblxuZGVzY3JpYmUoJ2FkYiBlbXUgY29tbWFuZHMnLCBmdW5jdGlvbiAoKSB7XG4gIGxldCBhZGI7XG4gIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgYWRiID0gYXdhaXQgQURCLmNyZWF0ZUFEQigpO1xuXG4gICAgLy8gdGhlIHRlc3QgaGVyZSBvbmx5IHdvcmtzIGlmIHdlIGhhdmUgQVBJIGxldmVsIDIzIG9yIGFib3ZlXG4gICAgLy8gaXQgd2lsbCBhbHNvIGZhaWwgb24gZW11bGF0b3JzXG4gICAgaWYgKGF3YWl0IGFkYi5nZXRBcGlMZXZlbCgpIDwgMjMgfHwgIXByb2Nlc3MuZW52LlJFQUxfREVWSUNFKSB7XG4gICAgICByZXR1cm4gdGhpcy5za2lwKCk7XG4gICAgfVxuICB9KTtcbiAgaXQoJ2ZpbmdlcnByaW50IHNob3VsZCBvcGVuIHRoZSBzZWNyZXQgYWN0aXZpdHkgb24gZW1pdHRlZCB2YWxpZCBmaW5nZXIgdG91Y2ggZXZlbnQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGF3YWl0IGFkYi5pc0FwcEluc3RhbGxlZChwa2cpKSB7XG4gICAgICBhd2FpdCBhZGIuZm9yY2VTdG9wKHBrZyk7XG4gICAgICBhd2FpdCBhZGIudW5pbnN0YWxsQXBrKHBrZyk7XG4gICAgfVxuICAgIGF3YWl0IGFkYi5pbnN0YWxsKGZpbmdlcnByaW50UGF0aCk7XG4gICAgYXdhaXQgYWRiLnN0YXJ0QXBwKHtwa2csIGFjdGl2aXR5fSk7XG4gICAgYXdhaXQgc2xlZXAoNTAwKTtcblxuICAgIGxldCBhcHAgPSBhd2FpdCBhZGIuZ2V0Rm9jdXNlZFBhY2thZ2VBbmRBY3Rpdml0eSgpO1xuICAgIGFwcC5hcHBBY3Rpdml0eS5zaG91bGQuZXF1YWwoYWN0aXZpdHkpO1xuICAgIGF3YWl0IGFkYi5maW5nZXJwcmludCgxMTExKTtcbiAgICBhd2FpdCBzbGVlcCgyNTAwKTtcblxuICAgIGFwcCA9IGF3YWl0IGFkYi5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5KCk7XG4gICAgYXBwLmFwcEFjdGl2aXR5LnNob3VsZC5lcXVhbChzZWNyZXRBY3Rpdml0eSk7XG4gIH0pO1xufSk7XG4iXSwiZmlsZSI6InRlc3QvZnVuY3Rpb25hbC9hZGItZW11LWNvbW1hbmRzLWUyZS1zcGVjcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
