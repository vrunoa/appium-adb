"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _ = _interopRequireDefault(require("../.."));

var _path = _interopRequireDefault(require("path"));

var _helpers = require("../../lib/helpers.js");

var _setup = require("./setup");

var _appiumSupport = require("appium-support");

var _temp = _interopRequireDefault(require("temp"));

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

let expect = _chai.default.expect;

const IME = 'com.example.android.softkeyboard/.SoftKeyboard',
      defaultIMEs = ['com.android.inputmethod.latin/.LatinIME', 'com.google.android.inputmethod.latin/com.android.inputmethod.latin.LatinIME', 'io.appium.android.ime/.UnicodeIME'],
      contactManagerPath = _path.default.resolve(_helpers.rootDir, 'test', 'fixtures', 'ContactManager.apk'),
      pkg = 'com.example.android.contactmanager',
      activity = 'ContactManager';

describe('adb commands', function () {
  this.timeout(_setup.MOCHA_TIMEOUT);
  let adb;
  before((0, _asyncToGenerator2.default)(function* () {
    adb = yield _.default.createADB({
      adbExecTimeout: 60000
    });
  }));
  it('getApiLevel should get correct api level', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.getApiLevel()).should.equal(_setup.apiLevel);
  }));
  it('getPlatformVersion should get correct platform version', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.getPlatformVersion()).should.include(_setup.platformVersion);
  }));
  it('availableIMEs should get list of available IMEs', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.availableIMEs()).should.have.length.above(0);
  }));
  it('enabledIMEs should get list of enabled IMEs', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.enabledIMEs()).should.have.length.above(0);
  }));
  it('defaultIME should get default IME', (0, _asyncToGenerator2.default)(function* () {
    const defaultIME = yield adb.defaultIME();

    if (defaultIME) {
      defaultIMEs.should.include(defaultIME);
    }
  }));
  it('enableIME and disableIME should enable and disble IME', (0, _asyncToGenerator2.default)(function* () {
    yield adb.disableIME(IME);
    (yield adb.enabledIMEs()).should.not.include(IME);
    yield adb.enableIME(IME);
    (yield adb.enabledIMEs()).should.include(IME);
    yield adb.enabledIMEs();
  }));
  it('processExists should be able to find ui process', (0, _asyncToGenerator2.default)(function* () {
    if (process.env.TRAVIS) {
      return this.skip();
    }

    (yield adb.processExists('com.android.systemui')).should.be.true;
  }));
  it('ping should return true', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.ping()).should.be.true;
  }));
  it('getPIDsByName should return pids', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.getPIDsByName('m.android.phone')).should.have.length.above(0);
  }));
  it('killProcessesByName should kill process', (0, _asyncToGenerator2.default)(function* () {
    yield adb.install(contactManagerPath);
    yield adb.startApp({
      pkg,
      activity
    });
    yield adb.killProcessesByName(pkg);
    (yield adb.getPIDsByName(pkg)).should.have.length(0);
  }));
  it('killProcessByPID should kill process', (0, _asyncToGenerator2.default)(function* () {
    yield adb.install(contactManagerPath);
    yield adb.startApp({
      pkg,
      activity
    });
    let pids = yield adb.getPIDsByName(pkg);
    pids.should.have.length.above(0);
    yield adb.killProcessByPID(pids[0]);
    (yield adb.getPIDsByName(pkg)).length.should.equal(0);
  }));
  it('should get device language and country', (0, _asyncToGenerator2.default)(function* () {
    if (parseInt(_setup.apiLevel, 10) >= 23) return this.skip();
    if (process.env.TRAVIS) return this.skip();
    ['en', 'fr'].should.contain((yield adb.getDeviceSysLanguage()));
    ['US', 'EN_US', 'EN', 'FR'].should.contain((yield adb.getDeviceSysCountry()));
  }));
  it('should set device language and country', (0, _asyncToGenerator2.default)(function* () {
    if (parseInt(_setup.apiLevel, 10) >= 23) return this.skip();
    if (process.env.TRAVIS) return this.skip();
    yield adb.setDeviceSysLanguage('fr');
    yield adb.setDeviceSysCountry('fr');
    yield adb.reboot();
    yield adb.getDeviceSysLanguage().should.eventually.equal('fr');
    yield adb.getDeviceSysCountry().should.eventually.equal('FR');
    yield adb.setDeviceSysLanguage('en');
    yield adb.setDeviceSysCountry('us');
  }));
  it('should get device locale', (0, _asyncToGenerator2.default)(function* () {
    if (parseInt(_setup.apiLevel, 10) < 23) return this.skip();
    yield adb.setDeviceSysLocaleViaSettingApp('en', 'US');
    ['us', 'en', 'ca_en', 'en-US'].should.contain((yield adb.getDeviceLocale()));
  }));
  it('should forward the port', (0, _asyncToGenerator2.default)(function* () {
    yield adb.forwardPort(4724, 4724);
  }));
  it('should remove forwarded port', (0, _asyncToGenerator2.default)(function* () {
    yield adb.forwardPort(8200, 6790);
    (yield adb.adbExec([`forward`, `--list`])).should.contain('tcp:8200');
    yield adb.removePortForward(8200);
    (yield adb.adbExec([`forward`, `--list`])).should.not.contain('tcp:8200');
  }));
  it('should start logcat from adb', (0, _asyncToGenerator2.default)(function* () {
    yield adb.startLogcat();
    let logs = adb.logcat.getLogs();
    logs.should.have.length.above(0);
    yield adb.stopLogcat();
  }));
  it('should get model', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.getModel()).should.not.be.null;
  }));
  it('should get manufacturer', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.getManufacturer()).should.not.be.null;
  }));
  it('should get screen size', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.getScreenSize()).should.not.be.null;
  }));
  it('should get screen density', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.getScreenDensity()).should.not.be.null;
  }));
  it('should be able to toggle gps location provider', (0, _asyncToGenerator2.default)(function* () {
    yield adb.toggleGPSLocationProvider(true);
    (yield adb.getLocationProviders()).should.include('gps');
    yield adb.toggleGPSLocationProvider(false);
    (yield adb.getLocationProviders()).should.not.include('gps');
  }));
  it('should be able to toogle airplane mode', (0, _asyncToGenerator2.default)(function* () {
    yield adb.setAirplaneMode(true);
    (yield adb.isAirplaneModeOn()).should.be.true;
    yield adb.setAirplaneMode(false);
    (yield adb.isAirplaneModeOn()).should.be.false;
  }));
  it('should be able to toogle wifi @skip-ci', (0, _asyncToGenerator2.default)(function* () {
    this.retries(3);
    yield adb.setWifiState(true);
    (yield adb.isWifiOn()).should.be.true;
    yield adb.setWifiState(false);
    (yield adb.isWifiOn()).should.be.false;
  }));
  it('should be able to turn off animation @skip-ci', (0, _asyncToGenerator2.default)(function* () {
    yield adb.grantPermission('io.appium.settings', 'android.permission.SET_ANIMATION_SCALE');
    yield adb.setAnimationState(false);
    (yield adb.isAnimationOn()).should.be.false;
  }));
  it('should be able to turn on animation @skip-ci', (0, _asyncToGenerator2.default)(function* () {
    yield adb.grantPermission('io.appium.settings', 'android.permission.SET_ANIMATION_SCALE');
    yield adb.setAnimationState(true);
    (yield adb.isAnimationOn()).should.be.true;
  }));
  it('should be able to set device locale via setting app @skip-ci', (0, _asyncToGenerator2.default)(function* () {
    yield adb.grantPermission('io.appium.settings', 'android.permission.CHANGE_CONFIGURATION');
    yield adb.setDeviceSysLocaleViaSettingApp('fr', 'fr');
    (yield adb.getDeviceSysLocale()).should.equal('fr-FR');
    yield adb.setDeviceSysLocaleViaSettingApp('zh', 'CN', 'Hans');
    (yield adb.getDeviceSysLocale()).should.equal('zh-Hans-CN');
    yield adb.setDeviceSysLocaleViaSettingApp('en', 'us');
    (yield adb.getDeviceSysLocale()).should.equal('en-US');
  }));
  describe('app permissions', function () {
    before((0, _asyncToGenerator2.default)(function* () {
      let deviceApiLevel = yield adb.getApiLevel();

      if (deviceApiLevel < 23) {
        return this.skip();
      }

      let isInstalled = yield adb.isAppInstalled('io.appium.android.apis');

      if (isInstalled) {
        yield adb.uninstallApk('io.appium.android.apis');
      }
    }));
    it('should install and grant all permission', (0, _asyncToGenerator2.default)(function* () {
      let apiDemos = _path.default.resolve(_helpers.rootDir, 'test', 'fixtures', 'ApiDemos-debug.apk');

      yield adb.install(apiDemos);
      (yield adb.isAppInstalled('io.appium.android.apis')).should.be.true;
      yield adb.grantAllPermissions('io.appium.android.apis');
      let requestedPermissions = yield adb.getReqPermissions('io.appium.android.apis');
      expect((yield adb.getGrantedPermissions('io.appium.android.apis'))).to.have.members(requestedPermissions);
    }));
    it('should revoke permission', (0, _asyncToGenerator2.default)(function* () {
      yield adb.revokePermission('io.appium.android.apis', 'android.permission.RECEIVE_SMS');
      expect((yield adb.getGrantedPermissions('io.appium.android.apis'))).to.not.have.members(['android.permission.RECEIVE_SMS']);
    }));
    it('should grant permission', (0, _asyncToGenerator2.default)(function* () {
      yield adb.grantPermission('io.appium.android.apis', 'android.permission.RECEIVE_SMS');
      expect((yield adb.getGrantedPermissions('io.appium.android.apis'))).to.include.members(['android.permission.RECEIVE_SMS']);
    }));
  });
  describe('push file', function () {
    function getRandomDir() {
      return `/data/local/tmp/test${Math.random()}`;
    }

    let localFile = _temp.default.path({
      prefix: 'appium',
      suffix: '.tmp'
    });

    let tempFile = _temp.default.path({
      prefix: 'appium',
      suffix: '.tmp'
    });

    const stringData = `random string data ${Math.random()}`;
    before((0, _asyncToGenerator2.default)(function* () {
      yield (0, _appiumSupport.mkdirp)(_path.default.dirname(localFile));
      yield (0, _appiumSupport.mkdirp)(_path.default.dirname(tempFile));
      yield _appiumSupport.fs.writeFile(localFile, stringData);
    }));
    after((0, _asyncToGenerator2.default)(function* () {
      if (yield _appiumSupport.fs.exists(localFile)) {
        yield _appiumSupport.fs.unlink(localFile);
      }
    }));
    afterEach((0, _asyncToGenerator2.default)(function* () {
      if (yield _appiumSupport.fs.exists(tempFile)) {
        yield _appiumSupport.fs.unlink(tempFile);
      }
    }));
    it('should push file to a valid location', (0, _asyncToGenerator2.default)(function* () {
      let remoteFile = `${getRandomDir()}/remote.txt`;
      yield adb.push(localFile, remoteFile);
      yield adb.pull(remoteFile, tempFile);
      let remoteData = yield _appiumSupport.fs.readFile(tempFile);
      remoteData.toString().should.equal(stringData);
    }));
    it('should throw error if it cannot write to the remote file', (0, _asyncToGenerator2.default)(function* () {
      let remoteFile = '/foo/bar/remote.txt';
      yield adb.push(localFile, remoteFile).should.be.rejectedWith(/\/foo\/bar\/remote.txt/);
    }));
  });
  describe('bugreport', function () {
    it('should return the report as a raw string', (0, _asyncToGenerator2.default)(function* () {
      if (process.env.TRAVIS) {
        return this.skip;
      }

      (yield adb.bugreport()).should.be.a('string');
    }));
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
