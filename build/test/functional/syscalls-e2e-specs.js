"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _ = _interopRequireDefault(require("../.."));

var _setup = require("./setup");

var _path = _interopRequireDefault(require("path"));

var _helpers = require("../../lib/helpers.js");

var _appiumSupport = require("appium-support");

const DEFAULT_CERTIFICATE = _path.default.resolve(_helpers.rootDir, 'keys', 'testkey.x509.pem');

_chai.default.use(_chaiAsPromised.default);

describe('System calls', function () {
  this.timeout(_setup.MOCHA_TIMEOUT);
  let adb;
  before((0, _asyncToGenerator2.default)(function* () {
    adb = yield _.default.createADB();
  }));
  it('getConnectedDevices should get devices', (0, _asyncToGenerator2.default)(function* () {
    let devices = yield adb.getConnectedDevices();
    devices.should.have.length.above(0);
  }));
  it('getDevicesWithRetry should get devices', (0, _asyncToGenerator2.default)(function* () {
    let devices = yield adb.getDevicesWithRetry();
    devices.should.have.length.above(0);
  }));
  it('adbExec should get devices when with devices', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.adbExec("devices")).should.contain("List of devices attached");
  }));
  it('isDeviceConnected should be true', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.isDeviceConnected()).should.be.true;
  }));
  it('shell should execute command in adb shell ', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.shell(['getprop', 'ro.build.version.sdk'])).should.equal(`${_setup.apiLevel}`);
  }));
  it('getConnectedEmulators should get all connected emulators', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.getConnectedEmulators()).length.should.be.above(0);
  }));
  it('getRunningAVD should get all connected avd', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.getRunningAVD(_setup.avdName)).should.not.be.null;
  }));
  it('getRunningAVDWithRetry should get all connected avds', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.getRunningAVDWithRetry(_setup.avdName)).should.not.be.null;
  }));
  it.skip('launchAVD should get all connected avds', (0, _asyncToGenerator2.default)(function* () {
    this.timeout(_setup.MOCHA_LONG_TIMEOUT);
    let proc = yield adb.launchAVD(_setup.avdName);
    (yield adb.getConnectedEmulators()).length.should.be.above(0);
    proc.stop();
  }));
  it('waitForDevice should get all connected avds', (0, _asyncToGenerator2.default)(function* () {
    yield adb.waitForDevice(2);
  }));
  it('reboot should reboot the device', (0, _asyncToGenerator2.default)(function* () {
    if (process.env.TRAVIS) {
      return this.skip();
    }

    this.timeout(_setup.MOCHA_LONG_TIMEOUT);
    yield adb.reboot(process.env.TRAVIS ? 200 : undefined);
    yield adb.ping();
  }));
  it('fileExists should detect when files do and do not exist', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.fileExists('/foo/bar/baz.zip')).should.be.false;
    (yield adb.fileExists('/system/')).should.be.true;
  }));
  it('ls should list files', (0, _asyncToGenerator2.default)(function* () {
    (yield adb.ls('/foo/bar')).should.eql([]);
    (yield adb.ls('/system/')).should.contain('etc');
  }));
  it('should check if the given certificate is already installed', (0, _asyncToGenerator2.default)(function* () {
    const certBuffer = yield _appiumSupport.fs.readFile(DEFAULT_CERTIFICATE);
    (yield adb.isMitmCertificateInstalled(certBuffer)).should.be.false;
  }));
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
