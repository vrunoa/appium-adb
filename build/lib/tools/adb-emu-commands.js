"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _lodash = _interopRequireDefault(require("lodash"));

const PHONE_NUMBER_PATTERN = /^[+]?[(]?[0-9]*[)]?[-\s.]?[0-9]*[-\s.]?[0-9]{2,}$/im;
let emuMethods = {};
emuMethods.POWER_AC_STATES = {
  POWER_AC_ON: 'on',
  POWER_AC_OFF: 'off'
};
emuMethods.GSM_CALL_ACTIONS = {
  GSM_CALL: 'call',
  GSM_ACCEPT: 'accept',
  GSM_CANCEL: 'cancel',
  GSM_HOLD: 'hold'
};
emuMethods.GSM_VOICE_STATES = {
  GSM_VOICE_UNREGISTERED: 'unregistered',
  GSM_VOICE_HOME: 'home',
  GSM_VOICE_ROAMING: 'roaming',
  GSM_VOICE_SEARCHING: 'searching',
  GSM_VOICE_DENIED: 'denied',
  GSM_VOICE_OFF: 'off',
  GSM_VOICE_ON: 'on'
};
emuMethods.GSM_SIGNAL_STRENGTHS = [0, 1, 2, 3, 4];
emuMethods.NETWORK_SPEED = {
  GSM: 'gsm',
  SCSD: 'scsd',
  GPRS: 'gprs',
  EDGE: 'edge',
  UMTS: 'umts',
  HSDPA: 'hsdpa',
  LTE: 'lte',
  EVDO: 'evdo',
  FULL: 'full'
};
emuMethods.isEmulatorConnected = (0, _asyncToGenerator2.default)(function* () {
  let emulators = yield this.getConnectedEmulators();
  return !!_lodash.default.find(emulators, x => x && x.udid === this.curDeviceId);
});
emuMethods.verifyEmulatorConnected = (0, _asyncToGenerator2.default)(function* () {
  if (!(yield this.isEmulatorConnected())) {
    throw new Error(`The emulator "${this.curDeviceId}" was unexpectedly disconnected`);
  }
});

emuMethods.fingerprint = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (fingerprintId) {
    if (!fingerprintId) {
      throw new Error('Fingerprint id parameter must be defined');
    }

    let level = yield this.getApiLevel();

    if (level < 23) {
      throw new Error(`Device API Level must be >= 23. Current Api level '${level}'`);
    }

    yield this.adbExecEmu(['finger', 'touch', fingerprintId]);
  });

  return function (_x) {
    return _ref3.apply(this, arguments);
  };
}();

emuMethods.rotate = (0, _asyncToGenerator2.default)(function* () {
  yield this.adbExecEmu(['rotate']);
});

emuMethods.powerAC = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (state = 'on') {
    if (_lodash.default.values(emuMethods.POWER_AC_STATES).indexOf(state) === -1) {
      throw new Error(`Wrong power AC state sent '${state}'. Supported values: ${_lodash.default.values(emuMethods.POWER_AC_STATES)}]`);
    }

    yield this.adbExecEmu(['power', 'ac', state]);
  });

  return function () {
    return _ref5.apply(this, arguments);
  };
}();

emuMethods.powerCapacity = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (percent = 100) {
    percent = parseInt(percent, 10);

    if (isNaN(percent) || percent < 0 || percent > 100) {
      throw new Error(`The percentage value should be valid integer between 0 and 100`);
    }

    yield this.adbExecEmu(['power', 'capacity', percent]);
  });

  return function () {
    return _ref6.apply(this, arguments);
  };
}();

emuMethods.powerOFF = (0, _asyncToGenerator2.default)(function* () {
  yield this.powerAC(emuMethods.POWER_AC_STATES.POWER_AC_OFF);
  yield this.powerCapacity(0);
});

emuMethods.sendSMS = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (phoneNumber, message = '') {
    message = message.trim();

    if (message === "") {
      throw new Error('Sending an SMS requires a message');
    }

    phoneNumber = `${phoneNumber}`.replace(/\s*/, "");

    if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {
      throw new Error(`Invalid sendSMS phoneNumber param ${phoneNumber}`);
    }

    yield this.adbExecEmu(['sms', 'send', phoneNumber, message]);
  });

  return function (_x2) {
    return _ref8.apply(this, arguments);
  };
}();

emuMethods.gsmCall = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (phoneNumber, action = '') {
    if (_lodash.default.values(emuMethods.GSM_CALL_ACTIONS).indexOf(action) === -1) {
      throw new Error(`Invalid gsm action param ${action}. Supported values: ${_lodash.default.values(emuMethods.GSM_CALL_ACTIONS)}`);
    }

    phoneNumber = `${phoneNumber}`.replace(/\s*/, "");

    if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {
      throw new Error(`Invalid gsmCall phoneNumber param ${phoneNumber}`);
    }

    yield this.adbExecEmu(['gsm', action, phoneNumber]);
  });

  return function (_x3) {
    return _ref9.apply(this, arguments);
  };
}();

emuMethods.gsmSignal = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (strength = 4) {
    strength = parseInt(strength, 10);

    if (emuMethods.GSM_SIGNAL_STRENGTHS.indexOf(strength) === -1) {
      throw new Error(`Invalid signal strength param ${strength}. Supported values: ${_lodash.default.values(emuMethods.GSM_SIGNAL_STRENGTHS)}`);
    }

    _logger.default.info('gsm signal-profile <strength> changes the reported strength on next (15s) update.');

    yield this.adbExecEmu(['gsm', 'signal-profile', strength]);
  });

  return function () {
    return _ref10.apply(this, arguments);
  };
}();

emuMethods.gsmVoice = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (state = 'on') {
    if (_lodash.default.values(emuMethods.GSM_VOICE_STATES).indexOf(state) === -1) {
      throw new Error(`Invalid gsm voice state param ${state}. Supported values: ${_lodash.default.values(emuMethods.GSM_VOICE_STATES)}`);
    }

    yield this.adbExecEmu(['gsm', 'voice', state]);
  });

  return function () {
    return _ref11.apply(this, arguments);
  };
}();

emuMethods.networkSpeed = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (speed = 'full') {
    if (_lodash.default.values(emuMethods.NETWORK_SPEED).indexOf(speed) === -1) {
      throw new Error(`Invalid network speed param ${speed}. Supported values: ${_lodash.default.values(emuMethods.NETWORK_SPEED)}`);
    }

    yield this.adbExecEmu(['network', 'speed', speed]);
  });

  return function () {
    return _ref12.apply(this, arguments);
  };
}();

var _default = emuMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
