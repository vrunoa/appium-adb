"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger.js"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _helpers = require("../helpers.js");

var _asyncLock = _interopRequireDefault(require("async-lock"));

const BASE_APK = 'base-master.apk';

const LANGUAGE_APK = lang => `base-${lang}.apk`;

const APKS_CACHE = new _lruCache.default({
  max: 10,
  dispose: (apksHash, extractedFilesRoot) => _appiumSupport.fs.rimraf(extractedFilesRoot)
});
const APKS_CACHE_GUARD = new _asyncLock.default();

function extractFromApks(_x, _x2) {
  return _extractFromApks.apply(this, arguments);
}

function _extractFromApks() {
  _extractFromApks = (0, _asyncToGenerator2.default)(function* (apks, dstPath) {
    if (!_lodash.default.isArray(dstPath)) {
      dstPath = [dstPath];
    }

    return yield APKS_CACHE_GUARD.acquire(apks, (0, _asyncToGenerator2.default)(function* () {
      const apksHash = yield _appiumSupport.fs.hash(apks);

      _logger.default.debug(`Calculated '${apks}' hash: ${apksHash}`);

      if (APKS_CACHE.has(apksHash)) {
        const resultPath = _path.default.resolve(APKS_CACHE.get(apksHash), ...dstPath);

        if (yield _appiumSupport.fs.exists(resultPath)) {
          return resultPath;
        }

        APKS_CACHE.del(apksHash);
      }

      const tmpRoot = yield _appiumSupport.tempDir.openDir();

      _logger.default.debug(`Unpacking application bundle at '${apks}' to '${tmpRoot}'`);

      yield (0, _helpers.unzipFile)(apks, tmpRoot);

      const resultPath = _path.default.resolve(tmpRoot, ...dstPath);

      if (!(yield _appiumSupport.fs.exists(resultPath))) {
        throw new Error(`${dstPath.join(_path.default.sep)} cannot be found in '${apks}' bundle. ` + `Does the archive contain a valid application bundle?`);
      }

      APKS_CACHE.set(apksHash, tmpRoot);
      return resultPath;
    }));
  });
  return _extractFromApks.apply(this, arguments);
}

let apksUtilsMethods = {};

apksUtilsMethods.execBundletool = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (args, errorMsg) {
    yield this.initBundletool();
    args = ['-jar', this.binaries.bundletool, ...args];

    _logger.default.debug(`Executing bundletool with arguments: ${JSON.stringify(args)}`);

    let stdout;

    try {
      var _ref2 = yield (0, _teen_process.exec)((0, _helpers.getJavaForOs)(), args);

      stdout = _ref2.stdout;

      _logger.default.debug(`Command stdout: ${_lodash.default.truncate(stdout, {
        length: 300
      })}`);

      return stdout;
    } catch (e) {
      if (e.stdout) {
        _logger.default.debug(`Command stdout: ${e.stdout}`);
      }

      if (e.stderr) {
        _logger.default.debug(`Command stderr: ${e.stderr}`);
      }

      throw new Error(`${errorMsg}. Original error: ${e.message}`);
    }
  });

  return function (_x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

apksUtilsMethods.getDeviceSpec = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (specLocation) {
    const args = ['get-device-spec', '--adb', this.executable.path, '--device-id', this.curDeviceId, '--output', specLocation];

    _logger.default.debug(`Getting the spec for the device '${this.curDeviceId}'`);

    yield this.execBundletool(args, 'Cannot retrieve the device spec');
    return specLocation;
  });

  return function (_x5) {
    return _ref3.apply(this, arguments);
  };
}();

apksUtilsMethods.installApks = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (apks, options = {}) {
    options = Object.assign({
      timeout: _helpers.APKS_INSTALL_TIMEOUT
    }, options, {
      replace: true
    });
    const tmpRoot = yield _appiumSupport.tempDir.openDir();

    try {
      const specPath = yield this.getDeviceSpec(_path.default.resolve(tmpRoot, 'deviceSpec.json'));
      const args = ['extract-apks', '--apks', apks, '--output-dir', tmpRoot, '--device-spec', specPath];

      _logger.default.debug(`Extracting the apk files from '${apks}'`);

      yield this.execBundletool(args, `Cannot extract the application bundle at '${apks}'`);
      const installArgs = (0, _helpers.buildInstallArgs)((yield this.getApiLevel()), options);
      const apkPathsToInstall = (yield _appiumSupport.fs.readdir(tmpRoot)).filter(name => name.endsWith(_helpers.APK_EXTENSION)).map(name => _path.default.resolve(tmpRoot, name));

      _logger.default.debug('Got the following apk files to install: ' + JSON.stringify(apkPathsToInstall.map(x => _path.default.basename(x))));

      const output = yield this.adbExec(['install-multiple', ...installArgs, ...apkPathsToInstall], {
        timeout: options.timeout
      });
      const truncatedOutput = !_lodash.default.isString(output) || output.length <= 300 ? output : `${output.substr(0, 150)}...${output.substr(output.length - 150)}`;

      _logger.default.debug(`Install command stdout: ${truncatedOutput}`);

      if (_lodash.default.includes(output, 'INSTALL_FAILED')) {
        throw new Error(output);
      }
    } finally {
      yield _appiumSupport.fs.rimraf(tmpRoot);
    }
  });

  return function (_x6) {
    return _ref4.apply(this, arguments);
  };
}();

apksUtilsMethods.extractBaseApk = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (apks) {
    return yield extractFromApks(apks, ['splits', BASE_APK]);
  });

  return function (_x7) {
    return _ref5.apply(this, arguments);
  };
}();

apksUtilsMethods.extractLanguageApk = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (apks, language = null) {
    if (language) {
      try {
        return yield extractFromApks(apks, ['splits', LANGUAGE_APK(language)]);
      } catch (e) {
        _logger.default.debug(e.message);

        _logger.default.info(`Assuming that splitting by language is not enabled for the '${apks}' bundle ` + `and returning the main apk instead`);

        return yield this.extractBaseApk(apks);
      }
    }

    const defaultLanguages = ['en', 'en_us'];

    for (var _i = 0; _i < defaultLanguages.length; _i++) {
      const lang = defaultLanguages[_i];

      try {
        return yield extractFromApks(apks, ['splits', LANGUAGE_APK(lang)]);
      } catch (ign) {}
    }

    _logger.default.info(`Cannot find any split apk for the default languages ${JSON.stringify(defaultLanguages)}. ` + `Returning the main apk instead.`);

    return yield this.extractBaseApk(apks);
  });

  return function (_x8) {
    return _ref6.apply(this, arguments);
  };
}();

var _default = apksUtilsMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
